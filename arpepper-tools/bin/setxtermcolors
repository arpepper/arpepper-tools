#!/usr/bin/perl -w

# To get the default values, following probably works...
# xvim -xrm '*customization:-color'
# But that doesn't let you tell what they are...

# http://www.bigsoft.co.uk/blog/index.php/2008/04/11/configuring-ls_colors
#
# 30   *color0:black
# 31   *color1:red
# 32   *color2:green
# 33   *color3:orange
# 34   *color4:blue
# 35   *color5:purple
# 36   *color6:cyan
# 37   *color7:grey
# bold versions of above (need not correspond, really) are color8 to color15
#
# following background colors do appear to match the non-bold above
# 40   *color8:black    background
# 41   *color9:red      background
# 42   *color10:green   background
# 43   *color11:orange  background
# 44   *color12:blue    background
# 45   *color13:purple  background
# 46   *color14:cyan    background
# 47   *color15:grey    background

# Set up our current defaults...

# This works well as a light gray in non-bold, but dark gray for bold
# In particular, lynx likes to use it as its background.
$RES = << "END";
*color0:rgb:cf/cf/cf
*color8:rgb:8b/8b/8b
END



# The rest for now we just keep identical for N and N+8 (ir we remember)
$RES .= << "END";
// color1 - perl strings or inclusions - reddish
*color1:rgb:e1/15/13
*color9:rgb:e1/15/13
*color2:rgb:3b/68/03
*color10:rgb:3b/68/03
// color3 - perl keywords - yellow or goldish (can => brown)
// *color3:rgb:74/54/00
*color3:rgb:7c/64/09
*color11:rgb:7c/64/09
// color4 - perl comments - bluish
// *color4:rgb:10/0c/7b
*color4:rgb:0c/08/8b
*color12:rgb:0c/08/8b
// color5 - perl #!line  purple (now pinkish?)
// *color5:rgb:b3/45/45
*color5:rgb:e8/59/59
*color13:rgb:e8/59/59
// color6 - perl variables, etc; this bold green seems just right, maybe
// *color6:rgb:09/7b/31
*color6:rgb:09/8b/39
*color14:rgb:09/8b/39
*color7:rgb:3e/8e/33
*color15:rgb:3e/7e/33
END

$IRES="";
# process - interpret given line and append to generated $IRES
	sub
process {
# color11=0xbb9513,0xbb9513
# Also allow...
#   *color11:	rgb:bb/95/13
# Also ignore # or / comments, or anything not parsing
	($string) = @_;
	return if $string =~ /^\s*$/;
	return if $string =~ /^\s*#/;
	return if $string =~ m:^\s*/:;  # ignore c++ (xrdb) comment
# ** ; # This comment closes m: pattern (vim parser bug)
	$string =~ s/\n//g;
	($a1,$junk) = split(/,/,$string);  # ?
	return if (!defined($a1));

	$rgbvalue = "0x090909";
	$junk=$junk if (defined($junk));
	$a1 =~ s/^[*]//;   # Allow us to process xrdb output
	($name,$rgbvalue) = split(/[:=]/,$a1,2);
	return if (!defined($name));
	return if (!defined($rgbvalue));
	$name =~ s/\s*//g;
	$rgbvalue =~ s/^\s+//;
	
	if ($rgbvalue =~ /^rgb/ ) {
		$xvalue = $rgbvalue;
	}
	else {
		$num = oct($rgbvalue);
		$b1 = ($num >> 16);
		$b2 = ($num >> 8);
		$b3 = ($num);
		$xvalue = sprintf("rgb:%2.2x/%2.2x/%2.2x",
			($b1&0xff), ($b2&0xff), ($b3&0xff) );
	}
	if ($name =~ /^color/) {
		$IRES .= "*" . $name . ":" . $xvalue . "\n";
	}
}
	
if (defined($ARGV[0]) && $ARGV[0] ne "") {
# We should not silently ignore extraneous args...
	if ($ARGV[0] eq "-") {
		while (<>) {
			process($_);
		}
	}
	else {
		open(COLORS,"<".$ARGV[0]) || die;
		while (<COLORS>) {
			process($_);
		}
		close(COLORS);
	}
	# Defaulting to setting to default
	#  can be awkward when testing since I have a tendency
	#  to say "| setxtermcolors" where I mean "| setxtermcolrs -"
	$RES = $IRES;
}
else {
# Hope this works correctly to avoid doing xrdb -merge with defaults
# when there was standard input.
# That is, detect omission of "-" argument.
	if ( ! -t *STDIN ) {
		die "input detected, but no args";
	}
# I sort of think for e.g. login script it might get wrong result.
# But it seemed to work via xsession2 menu item.
}



print $RES;

open(PIPE,"|xrdb -merge") || die;
print PIPE $RES;
close PIPE;

