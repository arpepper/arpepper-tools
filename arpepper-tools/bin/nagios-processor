#!/usr/bin/perl -w

$newpath = `/bin/showpath /u/arpepper/bin usedby=maintainer filetools gnu standard`;
if ( $newpath ne "" ) {
        $ENV{'PATH'} = $newpath;
}
else {
        die "Cannot set PATH";
}

$gnudate = "date"; # assert our path ensures that gnu/bin/date will be used
sub
unixtime {
	my ($datestring) = @_;

	# we need to change this to use internal routines soon.
	$value = `$gnudate --date "$datestring" +%s`;
	return 0 + $value; 
}

#
# This is extremely messy but currently works.
# The nested loop to process multiple messages on stdin is particularly
# messy.
#
sub
mail {
	my ($file, $preface, $subject) = @_;

	open(PIPE,"|/usr/lib/sendmail -bm arpepper\@cscf.cs.uwaterloo.ca");
	printf(PIPE "From: Adrian Pepper <arpepper\@uwaterloo.ca>\n");
	printf(PIPE "Subject: %s\n", $subject);
	printf(PIPE "\n");
	print PIPE $preface;
	open(F,"<$file");
	while (<F>) {
		print PIPE $_;
	}
	close(PIPE);
}

$end = 0;
while (<>) {
	if ($_ =~ /^From /) {
		$end = 0;
		next;
	}
	# ignore messages up to next /^From /
	next if $end;
	$fromseen = 0;
	$hevent = "";
	$hh = "";
	$hs = "host";
	$hstate = "";
	$event = "";
	$s = "host";
	$h = "";
	$state = "";
	$date = "";
	$from = "";
	$line = $_;
	# done one message
	while (defined($line) && $line =~ /\n/) {
		$line =~ s/\n//g;
		if ( $line =~ /^From: / ) {
			next if ($fromseen);
			$fromseen = 1;
			if ( ( $line =~ /^From: Nagios/ ) ) {
				$from = "Nagios";
			}
			else {
				$from = "";
			}
		}
		if ( $line =~ /^Subject/ ) {
			$line =~ m@^Subject: [*]+ ([^ ]+) alert - ([^ /]+)/([^ ]+) [^ ]+ ([^ ])+@;
			if (defined($1)) { $hevent = $1; }
			if (defined($2)) { $hh = $2; }
			if (defined($3)) { $hs = $3; }
			if (defined($4)) { $hstate = $4; }
		}
		if ( $line =~ m@^Notification Type: (.+$)@ ) {
			$event = $1;
		}
		if ( $line =~ m@^Service: (.+$)@ ) {
			$s = $1;
		}
		if ( $line =~ m@^Host: (.+$)@ ) {
			$h = $1;
		}
		if ( $line =~ m@^State: (.+$)@ ) {
			$state = $1;
		}
		if ( $line =~ m@^Date/Time: (.+$)@ ) {
			$date = $1;
		}
		if ( $line =~ m@^From @ ) {
			last;
		}
		if ( $line =~ m@^Additional Info:@ ) {
			last;
		}
		if ( $line =~ m@^URL:@ ) {
			last;
		}
		$line = <>;
	}
	if ( defined($line) && $line =~ m@^From @ ) {
		# No more lines to eat
		$end = 0;
	}
	else {
		$end = 1;
	}
	@x = ($hevent, $hh, $hs, $hstate, $event, $s, $h, $state, $date);
	@x = @x;

	#print $hevent, $hh, $hs, $hstate, $event, $s, $h, $state, $date, "\n";

	if ($from eq "Nagios") {
		chdir "/u/arpepper/nagios/hosts/";
		system("touch $h");
		open (H,"<$h") || die "Could not create $h";
		@lines = ();
		while (<H>) {
			push @lines, $_;
		}
		close(H);
		open (H,">$h") || die "Could not write $h";
		$seen = 0;
		foreach $line (@lines) {
			if ($line =~ /^${s}: /) {
				$seen = 1;
				# Need to parse old (and new) date
				# Replace line only if date is newer
				$newtime = &unixtime($date);
				$odate = $line;
				$odate =~ s/^.* - //;
				$odate =~ s/\n//;
				$oldtime = &unixtime($odate);
				# have seen recovery time == failure time
				# of course, won't help if mail order is wrong
				if ($newtime >= $oldtime) {
					# replace record only if newer
					printf(H "%s: %s - %s\n",
						$s, $state, $date);
					next;
				}
				# else fall through to use old line
			}
			printf(H "%s", $line);
		}
		if (!$seen) {
			printf(H "%s: %s - %s\n", $s, $state, $date);
		}
		close(H);
	}
}

$now = `/software/gnu/bin/date "+%s"`;
$recent = $now - 2*86400;

chdir "/u/arpepper/nagios";
system("date > update");
system("grep . hosts/* > summary-full");
system("grep . hosts/* | sed 's/ - .*//' > summary-state");
$r = "summary-recent";
system("touch $r");
open (R,"< $r") || die "Could not create $r";
close(R);
open (R,"> $r") || die "Could not write $r";
open (F,"< summary-full") || die "Could not open summary-full";
while (<F>) {
	# We need to stop forking gnu date to do this...
	$date = $_;
	$date =~ s/^.* - //;
	$date =~ s/\n//;
	if (&unixtime($date) > $recent ||
		( $_ !~ /: OK - / && $_ !~ /: UP - /) ) {
		print R $_;
	}
}
close(F);
close(R);

#
# Would be nice to filter things like cscf SMTP
#
system("grep . hosts/* | egrep -v '^[^: ]*:[^:]*: (OK|UP)' > problems-full");
system("grep . hosts/* | sed 's/ - .*//' | egrep -v '^[^: ]*:[^:]*: (OK|UP)' > problems-state");


#
# If there are new problems, we should know?
# Alerts for recovery are less critical.
# But how do we debounce?
#
$frequent = 0;
$hour=`/software/gnu/bin/date "+%H"`;
$hour += 0;
if (7 <= $hour && $hour <= 21) {
	$frequent = 1;
}
$dow = `/software/gnu/bin/date "+%w"`;
$dow += 0;
if ($dow < 1 || 5 < $dow) {
	$frequent = 0;
}
$then = `stat last -headings +mtime -pathname`;
$then += 0;
if ( $frequent) {
	if (($now - $then) >= (60*60) ) {
		$stars = ( -z "problems-state") ? "" : "** " ;
		$diff = `diff last/problems-state problems-state`;
		if  ($diff ne "") {
			$fdiff = `diff last/problems-full problems-full`;
			mail("summary-recent", $fdiff . "\n",
				"${stars}Summary nagios - change");
			system("cp -p summary-full last");
			system("cp -p summary-state last");
			system("cp -p summary-recent last");
			system("cp -p problems-full last");
			system("cp -p problems-state last");
			system("touch last/dummy ; rm last/dummy");
		}
	}
}
else {
	if (($now - $then) >= (8*60*60)) {
		$stars = ( -z "problems-state") ? "" : "** " ;
		if ( ! -z "problems-state") {
			mail("problems-full", "", "${stars}Summary nagios - problem");
			system("cp -p summary-full last");
			system("cp -p summary-state last");
			system("cp -p summary-recent last");
			system("cp -p problems-full last");
			system("cp -p problems-state last");
			system("touch last/dummy ; rm last/dummy");
		}
	}
}
