#!/usr/bin/perl -w

#
# This is extremely messy but currently works.
# The nested loop to process multiple messages on stdin is particularly
# messy.
#

$HOME = $ENV{'HOME'};
if ( !defined($HOME) || $HOME eq "" ) {
	$HOME = "/home/arpepper";
}

#$newpath = `/bin/showpath /u/arpepper/bin usedby=maintainer filetools gnu standard`;
$path = $ENV{'PATH'};

if ( $path eq "") {
	$path = "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin";
}
$newpath = "$HOME/bin:$path";
if ( $newpath ne "" ) {
        $ENV{'PATH'} = $newpath;
}
else {
        die "Cannot set PATH";
}

$gnudate = "date"; # assert our path ensures that gnu/bin/date will be used
sub
unixtime {
	my ($datestring) = @_;

	# we need to change this to use internal routines soon.
	$value = `$gnudate --date "$datestring" +%s`;
	return 0 + $value; 
}

sub
mail {
	my ($file, $preface, $subject) = @_;

	#print "mail $file $subject\n";
	#return;
	#open(PIPE,"|/usr/lib/sendmail -bm arpepper\@cs.uwaterloo.ca");
	#printf(PIPE "From: Adrian Pepper <arpepper\@uwaterloo.ca>\n");
	open(PIPE,"|/usr/lib/sendmail -f arpepper\@localhost -bm arpepper\@localhost");
	printf(PIPE "From: Adrian Pepper <arpepper\@uwaterloo.ca>\n");
	printf(PIPE "Subject: %s\n", $subject);
	printf(PIPE "\n");
	print PIPE $preface;
	open(F,"<$file");
	while (<F>) {
		print PIPE $_;
	}
}

$end = 0;

$mbox = $ARGV[0];
shift;

if ( !defined($mbox) || $mbox eq "" ) {
	exit 0
}

if ( $mbox eq "-a" ) {
	chdir "$HOME/mail-processor/";
	foreach $mbox ( `ls -1` ) { 
		$mbox =~ s/\n//;
		if ( -d $mbox ) {
			system("cat /dev/null | $HOME/bin/mail-processor $mbox" );
		}
	}
	exit 0;
}


if ( $mbox =~ m:^/u[^/]*/arpepper/mail/: ) {
	$mbox =~ s:^/u[^/]*/arpepper/mail/:: ;
}
if ( $mbox =~ m:^/home/arpepper/mail/: ) {
	$mbox =~ s:^/home/arpepper/mail/:: ;
}
if ( ! -d "$HOME/mail-processor/$mbox" ) {
	system("mkdir -p $HOME/mail-processor/$mbox");
}
chdir "$HOME/mail-processor/$mbox";
if ( ! -d "last" ) {
	system("mkdir -p last");
}

#$now = `/software/gnu/bin/date "+%s"`;
$now = `/bin/date "+%s"`;
#$recent = $now - 2*86400;

system("date > update");

$frequent = 0;
#$hour=`/software/gnu/bin/date "+%H"`;
$hour=`/bin/date "+%H"`;
$hour += 0;
if (7 <= $hour && $hour <= 21) {
	$frequent = 1;
}
#$dow = `/software/gnu/bin/date "+%w"`;
$dow = `/bin/date "+%w"`;
$dow += 0;
if ($dow < 1 || 5 < $dow) {
	$frequent = 0;
}
# $then = `stat last -headings +mtime -pathname`;
if ( -d "last" ) {
	$then = `/usr/bin/stat -c %Y last`;
	$then += 0;
}
else {
	$then = 0;
}
# A problem is first message in a batch gets sent off alone
# Would really like to wait five minutes to accumulate a batch
# 
# Even worse, a stored batch gets sent off, and then the latest waits
# for the next batch.
#
# I'm not even sure this preliminary examination is necessary.
# As long as zero input lets us fall through to bottom, identical
# logic at the bottom should send the stored batch.
if (0) {
if ( (( $frequent && (($now - $then) >= (60*60) ) )
	 || (($now - $then) >= (8*60*60)) )  ) {
	$items = 0 + `cat summary-recent | wc -l`;
	$messages = 0 + `cat recent | wc -l`;
	if ( $items != 0 || $messages != 0 ) {
		# Really we want to wait some time after first new message arrives
		#mail("summary-recent", "" . "\n", "Summary $mbox activity $messages/$items");
		mail("summary-recent", "" . "\n", "][$mbox $messages/$items summary");
		system("cp -p recent last");
		system("cp -p summary-recent last");
		$r = "recent";
		open (R,">$r") || die "Could not write $h";
		close(R);
		$r = "summary-recent";
		open (R,">$r") || die "Could not write $r";
		system("touch last/dummy ; rm last/dummy");
	}
}
}

#while (<>) {
#}

while (<>) {
	if ($_ =~ /^From /) {   # /^From /i ?
		$end = 0;
		next;
	}
	# ignore messages up to next /^From /
	next if $end;
	$fromseen = 0;
	$from = "";
	$efrom = "";
	$line = $_;
	$rtno = 0;
	# done one message
	while (defined($line) && $line ne "\n" && $line =~ /\n/ ) {
		$line =~ s/\n//g;
		if ( $line =~ /^From: /i ) {
			next if ($fromseen);
			$fromseen = 1;
			$from = "Someone";
			$efrom = "";
		}
		if ( $line =~ /^Subject: /i ) {
			undef $subject;
			$line =~ m@^Subject: \[UW-(RT|MATH|MFCF|CSCF)\s+#([0-9]+)\] *(.*)@i;
			if (defined($2)) {
				$rtno = $2 if $rtno == 0;
				if (defined($3)) {
					$subject = $3;
				}
			}
			else {
				$subject = $line;
				$subject =~ s/^Subject\:\s*//;
				$subject =~ s/^[Rr][Ee]:/Re:/;
			}
			while (<>) {
				$cline = $line = $_;
				$cline =~ s/\n//g;
				# really should generalize multi-line
				if ($cline !~ /^\s+/ ) {
					# process in next iteration
					last;
				}
				else {
					$cline =~ s/^\s+//;
					$subject .= " " . "$cline";
				}
			}
			$subject =~ s/(.{1,90}).*/$1/;
		}
		elsif ( $line =~ m@^From @ ) {
			last;
		}
		else {
			# avoid going past look-ahead, e.g. multi-line headers
			$line = <>;
		}
	}
	if ( defined($line) && $line =~ m@^From @ ) {
		# No more lines to eat; start new message
		$end = 0;
	}
	else {
		$end = 1;
	}

	if ($from eq "Someone") {
		#chdir "$HOME/rt/";
		$r = "recent";
		system("touch $r");
		open (R,">>$r") || die "Could not write $h";
		print R "$subject\n";
		close(R);
	}
	else {
		#chdir "$HOME/rt/";
		$r = "errors";
		system("touch $r");
		open (R,">>$r") || die "Could not write $h";
		print R "$efrom\n";
		close(R);
	}
}

#$now = `/software/gnu/bin/date "+%s"`;
$now = `/bin/date "+%s"`;
#$recent = $now - 2*86400;

#chdir "$HOME/rt";
system("date > update");
if ( -z "recent" ) { exit(0); }

system("sort recent | uniq -c | sort -nr | sed 's/	/  /g' | sed 's/^    //' > summary-recent-$$");
system("mv summary-recent-$$ summary-recent");

#
# If there are new problems, we should know?
# Alerts for recovery are less critical.
# But how do we debounce?
#
$frequent = 0;
if ( -f "./important" ) {
	# Should probably use a file of variables (how to cache?)
	# Also, I'd misremembered the flag file name as "./frequent" ...
	#$hour=`/software/gnu/bin/date "+%H"`;
	$hour=`/bin/date "+%H"`;
	$hour += 0;
	if (7 <= $hour && $hour <= 21) {
		$frequent = 1;
	}
	#$dow = `/software/gnu/bin/date "+%w"`;
	$dow = `/bin/date "+%w"`;
	$dow += 0;
	if ($dow < 1 || 5 < $dow) {
		$frequent = 0;
	}
	$then = `stat last -headings +mtime -pathname`;
	$then += 0;
}
# Problem is first message in a batch gets sent off alone
# Would really like to wait five minutes to accumulate a batch
# 
$DEFAULTHOURS = 18;  # used to be "8"
if ( (( $frequent && (($now - $then) >= (60*60) ) )
	 || (($now - $then) >= (${DEFAULTHOURS}*60*60)) )  ) {
	# This works okay, but more arbitrary archives might be nice
	$items = 0 + `cat summary-recent | wc -l`;
	$messages = 0 + `cat recent | wc -l`;
	if ( $items != 0 || $messages != 0 ) {
		# Really we want to wait some time after first new message arrives
		#mail("summary-recent", "" . "\n", "Summary $mbox activity $messages/$items");
		mail("summary-recent", "" . "\n", "][$mbox $messages/$items summary");
		system("cp -p recent last/");
		system("cp -p summary-recent last/");
		$r = "recent";
		open (R,">$r") || die "Could not write $r";
		close(R);
		$r = "summary-recent";
		open (R,">$r") || die "Could not write $r";
		close(R);
		system("touch last/dummy ; rm last/dummy");
	}
}
