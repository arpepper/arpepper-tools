head	1.4;
access;
symbols;
locks; strict;
comment	@# @;


1.4
date	2021.11.29.01.29.40;	author arpepper;	state Exp;
branches;
next	1.3;

1.3
date	2021.11.29.01.21.09;	author arpepper;	state Exp;
branches;
next	1.2;

1.2
date	2020.06.09.18.59.27;	author arpepper;	state Exp;
branches;
next	1.1;

1.1
date	2020.06.09.18.47.13;	author arpepper;	state Exp;
branches;
next	;


desc
@I actually managed to start something to view silly calendar requests.
@


1.4
log
@A couple of corrections.
@
text
@#!/usr/bin/perl -w

# mailcap will have decoded base64

$b="";
$tz="";
$state="";
$orger="";
$attee="";
$desc="";
$start="";
$endat="";
while (<>) {
	$_ =~ s/\n//g;
	$_ =~ s/\r//g;  # Handle MS-Dos format
	if ( $_ =~ /^ / ) {
		$_ =~ s/^ //;
		$b .= $_;
		next;
	}
	else {
# print $b;
		if ( $b =~ /^BEGIN:(.*)/ ) {
			$state .= ":".$1 ;
		}
		elsif ( $b =~ /^END:(.*)/ ) {
			$state =~ s/:${1}$//; # I wonder if they can be crossed
		}
		if ( $b =~ /^TZID:/ ) { $t=$b; $t =~ s/^.*://; $tz.=$t;}
# ORGANIZER;CN=School of Computer Science;SENT-BY="mailto:dan.brown@@uwaterloo.ca":mailto:tm-math-schoolofcomputerscience@@uofwaterloo.mail.onmicrosoft.com
# ATTENDEE;ROLE=REQ-PARTICIPANT;PARTSTAT=NEEDS-ACTION;RSVP=TRUE;CN=Dan Brown:mailto:dan.brown@@uwaterloo.ca
# SUMMARY;LANGUAGE=en-US:CS Council Meeting\, June 2020
		if ( $b =~/^ORGANIZER;.*:/ ) { $t=$b;$t =~ s/^[^:]*://; $orger.=$t;}
		if ( $b =~/^ATTENDEE;.*:/ ) { $t=$b;$t =~ s/^[^:]*://; $attee.="   ".$t."\n";}
		if ( $b =~/^DESCRIPTION;.*:/ ) { $t=$b;$t =~ s/^[^:]*://; $desc.=$t;}
		if ( $b =~/^SUMMARY;.*:/ ) { $t=$b;$t =~ s/^[^:]*://; $summ=$t;}
		if ( $b =~/^DTSTART;.*:/ ) { $t=$b;$t =~ s/^[^:]*://; $start.=$t;}
		if ( $b =~/^DTEND;.*:/ ) { $t=$b;$t =~ s/^[^:]*://; $endat.=$t;}
	}
	$b = $_;
}

# The above and the following suits my needs nearly all the time
printf("\nEvent: %s\n  Starts: %s %s\n  Ends:  %s %s\nOrganizer:\n   %s\nAttendees:\n%s\n",
	$summ, $start, $tz, $endat, $tz, $orger, $attee);


@


1.3
log
@SOMETIMES .ical/.isc get stored in MS-Dos format, so handle that,
in a crude fashion for now.
 
Begin state processing, but we do not pay attention to it yet.
More properly prefer summary to description; we really need to
figure out what to do with description, which is often verbose.
@
text
@d27 1
a27 2
			
			$state =~ s/:${1}//;
d43 1
a43 1
# The above and the following suirs my needs nearly all the time
@


1.2
log
@Print SUMMARY in preference to DESCRIPTION (assuming SUMMARY comes later).
Add an initial newline for tidiness.
@
text
@d7 1
d14 2
a15 1
	$_ =~ s/\n//;
d22 8
d37 1
a37 1
		if ( $b =~/^SUMMARY;.*:/ ) { $t=$b;$t =~ s/^[^:]*://; $desc=$t;}
d44 1
d46 1
a46 1
	$desc, $start, $tz, $endat, $tz, $orger, $attee);
@


1.1
log
@Initial revision
@
text
@d23 1
d27 1
d34 1
a34 1
printf("Event: %s\n  Starts: %s %s\n  Ends:  %s %s\nOrganizer:\n   %s\nAttendees:\n%s\n",
@
