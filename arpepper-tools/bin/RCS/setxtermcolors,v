head	1.15;
access;
symbols;
locks
	arpepper:1.15; strict;
comment	@# @;


1.15
date	2021.11.20.12.10.15;	author arpepper;	state Exp;
branches;
next	1.14;

1.14
date	2021.11.16.00.12.03;	author arpepper;	state Exp;
branches;
next	1.13;

1.13
date	2021.11.16.00.00.04;	author arpepper;	state Exp;
branches;
next	1.12;

1.12
date	2021.11.13.22.50.46;	author arpepper;	state Exp;
branches;
next	1.11;

1.11
date	2021.11.13.21.17.25;	author arpepper;	state Exp;
branches;
next	1.10;

1.10
date	2021.11.13.18.53.09;	author arpepper;	state Exp;
branches;
next	1.9;

1.9
date	2021.11.13.18.44.44;	author arpepper;	state Exp;
branches;
next	1.8;

1.8
date	2021.10.31.17.49.24;	author arpepper;	state Exp;
branches;
next	1.7;

1.7
date	2021.10.31.16.34.27;	author arpepper;	state Exp;
branches;
next	1.6;

1.6
date	2016.11.12.00.03.33;	author arpepper;	state Exp;
branches;
next	1.5;

1.5
date	2016.11.10.20.09.33;	author arpepper;	state Exp;
branches;
next	1.4;

1.4
date	2016.11.01.22.57.07;	author arpepper;	state Exp;
branches;
next	1.3;

1.3
date	2016.11.01.22.17.40;	author arpepper;	state Exp;
branches;
next	1.2;

1.2
date	2016.11.01.22.09.45;	author arpepper;	state Exp;
branches;
next	1.1;

1.1
date	2016.11.01.21.57.57;	author arpepper;	state Exp;
branches;
next	;


desc
@Patch the standard 16 xterm colours with more moderate alternatives
we can tolerate.
@


1.15
log
@Add a comment to close m: for the buggy vim perl parser.
@
text
@#!/usr/bin/perl -w

# To get the default values, following probably works...
# xvim -xrm '*customization:-color'
# But that doesn't let you tell what they are...

# http://www.bigsoft.co.uk/blog/index.php/2008/04/11/configuring-ls_colors
#
# 30   *color0:black
# 31   *color1:red
# 32   *color2:green
# 33   *color3:orange
# 34   *color4:blue
# 35   *color5:purple
# 36   *color6:cyan
# 37   *color7:grey
# bold versions of above (need not correspond, really) are color8 to color15
#
# following background colors do appear to match the non-bold above
# 40   *color8:black    background
# 41   *color9:red      background
# 42   *color10:green   background
# 43   *color11:orange  background
# 44   *color12:blue    background
# 45   *color13:purple  background
# 46   *color14:cyan    background
# 47   *color15:grey    background

# Set up our current defaults...

# This works well as a light gray in non-bold, but dark gray for bold
# In particular, lynx likes to use it as its background.
$RES = << "END";
*color0:rgb:cf/cf/cf
*color8:rgb:8b/8b/8b
END



# The rest for now we just keep identical for N and N+8 (ir we remember)
$RES .= << "END";
// color1 - perl strings or inclusions - reddish
*color1:rgb:e1/15/13
*color9:rgb:e1/15/13
*color2:rgb:3b/68/03
*color10:rgb:3b/68/03
// color3 - perl keywords - yellow or goldish (can => brown)
// *color3:rgb:74/54/00
*color3:rgb:7c/64/09
*color11:rgb:7c/64/09
// color4 - perl comments - bluish
// *color4:rgb:10/0c/7b
*color4:rgb:0c/08/8b
*color12:rgb:0c/08/8b
// color5 - perl #!line  purple (now pinkish?)
// *color5:rgb:b3/45/45
*color5:rgb:e8/59/59
*color13:rgb:e8/59/59
// color6 - perl variables, etc; this bold green seems just right, maybe
// *color6:rgb:09/7b/31
*color6:rgb:09/8b/39
*color14:rgb:09/8b/39
*color7:rgb:3e/8e/33
*color15:rgb:3e/7e/33
END

$IRES="";
# process - interpret given line and append to generated $IRES
	sub
process {
# color11=0xbb9513,0xbb9513
# Also allow...
#   *color11:	rgb:bb/95/13
# Also ignore # or / comments, or anything not parsing
	($string) = @@_;
	return if $string =~ /^\s*$/;
	return if $string =~ /^\s*#/;
	return if $string =~ m:^\s*/:;  # ignore c++ (xrdb) comment
# ** ; # This comment closes m: pattern (vim parser bug)
	$string =~ s/\n//g;
	($a1,$junk) = split(/,/,$string);  # ?
	return if (!defined($a1));

	$rgbvalue = "0x090909";
	$junk=$junk if (defined($junk));
	$a1 =~ s/^[*]//;   # Allow us to process xrdb output
	($name,$rgbvalue) = split(/[:=]/,$a1,2);
	return if (!defined($name));
	return if (!defined($rgbvalue));
	$name =~ s/\s*//g;
	$rgbvalue =~ s/^\s+//;
	
	if ($rgbvalue =~ /^rgb/ ) {
		$xvalue = $rgbvalue;
	}
	else {
		$num = oct($rgbvalue);
		$b1 = ($num >> 16);
		$b2 = ($num >> 8);
		$b3 = ($num);
		$xvalue = sprintf("rgb:%2.2x/%2.2x/%2.2x",
			($b1&0xff), ($b2&0xff), ($b3&0xff) );
	}
	if ($name =~ /^color/) {
		$IRES .= "*" . $name . ":" . $xvalue . "\n";
	}
}
	
if (defined($ARGV[0]) && $ARGV[0] ne "") {
# We should not silently ignore extraneous args...
	if ($ARGV[0] eq "-") {
		while (<>) {
			process($_);
		}
	}
	else {
		open(COLORS,"<".$ARGV[0]) || die;
		while (<COLORS>) {
			process($_);
		}
		close(COLORS);
	}
	# Defaulting to setting to default
	#  can be awkward when testing since I have a tendency
	#  to say "| setxtermcolors" where I mean "| setxtermcolrs -"
	$RES = $IRES;
}
else {
# Hope this works correctly to avoid doing xrdb -merge with defaults
# when there was standard input.
# That is, detect omission of "-" argument.
	if ( ! -t *STDIN ) {
		die "input detected, but no args";
	}
# I sort of think for e.g. login script it might get wrong result.
# But it seemed to work via xsession2 menu item.
}



print $RES;

open(PIPE,"|xrdb -merge") || die;
print PIPE $RES;
close PIPE;

@


1.14
log
@Set color+8 to match color.
@
text
@d78 2
a79 1
	return if $string =~ m:^\s*/:;  # ignore c++ (xrdb) comments
@


1.13
log
@Tweak the crucial colors.
@
text
@d50 1
a50 1
*color11:rgb:74/54/00
d54 1
a54 1
*color12:rgb:10/0c/7b
d62 1
a62 1
*color14:rgb:09/7b/31
@


1.12
log
@Tweak colo[u]rs.
Edit comments.
Add crude tool to prevent accidental reset to default.
@
text
@d48 2
a49 3
// *color3:rgb:98/a2/10
// *color3:rgb:72/72/00
*color3:rgb:74/54/00
d52 2
a53 3
// *color4:rgb:2b/25/ab
// *color4:rgb:1b/15/8b
*color4:rgb:10/0c/7b
d60 2
a61 2
// *color6:rgb:10/85/53
*color6:rgb:09/7b/31
@


1.11
log
@Identified color6.
Tweak color14 (set to corresponding value).
@
text
@d5 1
a30 2
# We attempted to map them all to be brown-ish, but not quite

d39 2
a40 1
# The rest for now we just keep identical for N and N+8
d42 1
a42 1
// color1 - perl strings or inclusions
d44 1
a44 1
*color9:rgb:7b/05/03
d47 1
a47 1
// color3 - perl keywords
d49 4
a52 3
*color3:rgb:72/72/00
*color11:rgb:72/72/00
// color4 - perl comments
d54 7
a60 5
*color4:rgb:1b/15/8b
*color12:rgb:1b/15/8b
// color5 - perl #!line
*color5:rgb:f3/05/31
*color13:rgb:7b/05/33
d62 3
a64 2
*color6:rgb:10/85/53
*color14:rgb:10/85/53
d70 1
d74 3
d111 1
d124 3
d129 12
@


1.10
log
@Trying to tweak color3 (keywords) and color4 (comments).
@
text
@d58 1
d60 1
a60 1
*color14:rgb:0b/75/23
@


1.9
log
@Ignore comments (we generally generate).
New defined checks.
(Allow us to echo unrecognized input).
@
text
@d48 3
a50 2
*color3:rgb:98/a2/10
*color11:rgb:7b/45/03
d52 3
a54 2
*color4:rgb:2b/25/ab
*color12:rgb:1b/05/8b
@


1.8
log
@Use newly-developed colors.
Currently bold does not equal non-bold.
@
text
@d69 1
d72 1
d75 1
a75 1
	$junk=$junk;
d78 2
@


1.7
log
@Allow spaces around delimiters.
Allow us to process assumed xrdb output
I.e.
*color5:        rgb:7b/05/33
@
text
@d42 18
a59 14
*color1:rgb:cb/55/13
*color9:rgb:bb/55/13
*color2:rgb:8b/98/13
*color10:rgb:8b/98/13
*color3:rgb:bb/95/13
*color11:rgb:bb/95/13
*color4:rgb:6b/45/db
*color12:rgb:6b/45/db
*color5:rgb:ab/35/83
*color13:rgb:ab/35/83
*color6:rgb:4b/a5/73
*color14:rgb:4b/a5/73
*color7:rgb:8e/ae/83
*color15:rgb:8e/ae/83
@


1.6
log
@rewrote in perl to process a file of input.
@
text
@d65 4
a68 1
	($a1,$junk) = split(/,/,$string);
d70 4
a73 1
	($name,$rgbvalue) = split(/=/,$a1);
d75 11
a85 6
	$num = oct($rgbvalue);
	$b1 = ($num >> 16);
	$b2 = ($num >> 8);
	$b3 = ($num);
	$xvalue = sprintf("rgb:%2.2x/%2.2x/%2.2x",
		($b1&0xff), ($b2&0xff), ($b3&0xff) );
@


1.5
log
@tweaked color7/15 (default grey?)
@
text
@d1 4
a4 1
#!/bin/bash
d28 2
d34 1
a34 1
xrdb -merge << END
d41 1
a41 1
xrdb -merge << END
d57 45
@


1.4
log
@*** empty log message ***
@
text
@d49 2
a50 2
*color7:rgb:be/ae/13
*color15:rgb:be/ae/13
@


1.3
log
@Use a perceptibly dark light gray.
Found a cyan which doesn't glare.
@
text
@d34 1
d43 2
a44 2
*color4:rgb:8b/45/d3
*color12:rgb:8b/45/d3
@


1.2
log
@Tweaking.
Trying to get rid of all faded ones.
@
text
@d30 1
a30 1
*color0:rgb:eb/eb/eb
d46 2
a47 2
*color6:rgb:6b/55/13
*color14:rgb:6b/55/13
@


1.1
log
@Initial revision
@
text
@d36 6
a41 6
*color1:rgb:db/45/13
*color9:rgb:db/45/13
*color2:rgb:8b/ae/13
*color10:rgb:8b/ae/13
*color3:rgb:cb/a5/13
*color11:rgb:cb/a5/13
d44 2
a45 2
*color5:rgb:ab/35/a3
*color13:rgb:ab/35/a3
@
