head	1.11;
access;
symbols;
locks
	arpepper:1.11; strict;
comment	@# @;


1.11
date	2021.10.03.21.54.03;	author arpepper;	state Exp;
branches;
next	1.10;

1.10
date	2021.09.18.19.24.34;	author arpepper;	state Exp;
branches;
next	1.9;

1.9
date	2021.05.05.23.05.19;	author arpepper;	state Exp;
branches;
next	1.8;

1.8
date	2021.05.05.22.13.23;	author arpepper;	state Exp;
branches;
next	1.7;

1.7
date	2021.05.05.21.50.25;	author arpepper;	state Exp;
branches;
next	1.6;

1.6
date	2019.07.23.16.08.57;	author arpepper;	state Exp;
branches;
next	1.5;

1.5
date	2016.04.19.15.47.45;	author arpepper;	state Exp;
branches;
next	1.4;

1.4
date	2016.04.19.15.39.07;	author arpepper;	state Exp;
branches;
next	1.3;

1.3
date	2013.10.28.19.40.07;	author arpepper;	state Exp;
branches;
next	1.2;

1.2
date	2011.01.17.16.06.29;	author arpepper;	state Exp;
branches;
next	1.1;

1.1
date	2011.01.17.15.28.36;	author arpepper;	state Exp;
branches;
next	;


desc
@Designed to run vim in an X window, can be used to start an X window.
@


1.11
log
@A few mostly fixes, with some resulting slight functional differences,
tested mostly on u1804firefox.  (E.g. for withExEditor)

Biggest fix was using "-geometry" instead of resources.
It turned out that unexpected values for associated geometry
resources could produce unexpected results.

I re-evaluated the font size table, with a new program "xfontsizes".

In general height calculation was made more correct and more tolerant
of larger values.

A problem with using "-geometry" instead of resources is I cannot use
a geometry e.g. -0-0 to combine with the previous WxH geometry.  In a
later version I should merge the calculated "-g" with the latest
apparent command-line "-g".
@
text
@#!/bin/bash -f

#echo HOME=$HOME
xvimd="$HOME/.xvim.d"
if [[ "$HOME" != "" && -d "$HOME" && ! -e $HOME/.xvim.d ]]
then
	umask 077
	#echo mkdir -p $HOME/.xvim.d
	mkdir -p $HOME/.xvim.d
fi

fs=12
if [[ -r $xvimd/fs ]]
then
	fs=`cat $xvimd/fs`
fi
#echo fs=$fs

# Following was determined by running xterm with successive -fs
# and using "xwininfo" to get the info for those selectively sized windows.
declare -a olddims=(
        "0x0"
        "1x3"
        "2x4"
        "2x5"
        "3x7"
        "4x9"
        "5x10"
        "6x12"
        "6x13"
        "7x15"
        "8x17"
        "9x18"
        "10x19"
        "10x22"
        "11x23"
        "12x24"
        "13x26"
        "14x28"
        "14x29"
        "15x30"
        "16x32"
        "17x33"
        "18x35"
        "18x37"
        "19x38"
        "20x39"
)

# Calculated new values...
# 1:1x2
# 2:1x3
# 3:2x4
# 4:3x5
# 5:3x7
# 6:4x8
# 7:4x10
# 8:5x11
# 9:6x13
# 10:6x14
# 11:7x15
# 12:8x16
# 13:8x18
# 14:9x19
# 15:9x20
# 16:10x21
# 17:11x24
# 18:11x25
# 19:12x26
# 20:13x27
# 21:13x29
# 22:14x30
# 23:14x31
# 24:15x32
# 25:16x34
# 26:16x35
# 27:17x37
# 28:18x38
# 29:18x40
# 30:19x40
declare -a dims=(
        "0x0"
        "1x2"
        "1x3"
        "2x4"
        "3x5"
        "3x7"
        "4x8"
        "4x9"
        "5x10"
        "6x12"
        "6x13"
        "7x14"
        "8x15"
        "8x17"
        "9x18"
        "9x19"
        "10x20"
        "11x22"
        "11x23"
        "12x24"
        "13x25"
        "13x27"
        "14x28"
        "14x29"
        "15x30"
        "16x32"
        "16x33"
        "17x34"
        "18x35"
        "18x37"
        "19x37"
         "19x38"
         "20x39"
         "21x41"
         "21x42"
         "22x43"
         "23x44"
         "23x46"
         "24x47"
         "24x48"
         "25x49"
         "26x51"
         "26x52"
         "27x53"
         "28x54"
         "28x56"
         "29x57"
         "29x58"
         "30x59"
         "31x61"
         "31x62"
         "32x63"
         "33x64"
         "33x66"
         "34x67"
         "35x68"
         "35x69"
         "36x70"
         "36x72"
         "37x73"
         "38x74"
)



#for i in 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
#do
#	echo ${dims[$i]}
#done

# RESTART
# point size should be height, in absolute units 1/72 of 25.4mm
# E.g. height 296mm = 296 * 72 / 25.4 = 839 points
# fs 10 should give 80 chars or so... but doesn't
# 
# Empirically, fs appears to be pixels; could it be height?
#   No, appears to be width.

#xterm -xrm '*font:6x15' -xrm '*geometry:80x55' -xrm '*.background:#efefef' -xrm '*.foreground:#0f0f0f' -e vim
#xterm -xrm '*font:6x15' -xrm '*geometry:80x55' -xrm 'Xterm*background:#efefef' -xrm 'Xterm*foreground:#0f0f0f'
#xterm -xrm '*font:6x15' -xrm '*geometry:80x55' -xrm 'Xterm*background:#efefef' -xrm 'Xterm*foreground:#0f0f0f' -xrm '*Color:#efefef'
#xterm -xrm '*geometry:80x55' -bg '#efefef' -fg '#0f0f0f' -fs 1
args="$@@"
#echo $args
#echo $DISPLAY
#echo args = "${args}"
#echo args2 = "${args[2]}"
#echo args2 = "${@@}[2]"
eargs=`echo "${args}" | sed 's/ *-e .*//'`


#fs=12
sizenext=0
for a in $eargs
do
	if (( $sizenext > 0 ))
	then
		# We used to size check font here, but now do it later
		fs=$a
		#fs=`echo "$fs" | sed 's/^.*x//'`
		#echo fs=$fs
		sizenext=0
	fi
	case $a in
	(-fs)
		sizenext=1
		;;
	(*)
		sizenext=0
	esac
done
g=""
# Note: no // around RE
if [[ "${eargs}" =~ "-g" ]]
then
# echo found a dash g
	# Following would be fooled by e.g. -title our-geometry
	g=`echo "${eargs}" | sed 's/^.*-g/-g/' | sed 's/^-g[^ ]*  *\([^ ]*\).*/\1/'`
	eargs=`echo "${eargs}" | sed 's/-g[^ ]* [^ ]*//'`
fi
#echo g="$g" eargs="${eargs}"

#echo fs=$fs
#echo dim ${dims[$fs]}

# Mon Jan 17 11:04:21 EST 2011 -
#   faceSize and/or -fa became harmful on Solaris X display
#   (perhaps because of shutting down of some font servers?)
# I wish I knew how to specify a font for the Ubuntu X environment.
# -fa is the facename
faces=""
case "$DISPLAY" in
	:[0-9]*|:[0-9]*.[0-9]|localhost:[0-9]*|localhost:[0-9]*.[0-9])
	#((localhost|):[0-9]*(.[0-9]|))
	#:[0-9]*.0|localhost:[0-9]*.0)
		# Note in bash extra quoting is not needed to
		# and can be harmful
		faces=""
		faces="$faces -xrm *FaceSize:$fs"
		faces="$faces -xrm *faceSize:$fs"
		faces="$faces -xrm *FaceSize1:6"
		faces="$faces -xrm *faceSize1:6"
		faces="$faces -xrm *FaceSize2:9"
		faces="$faces -xrm *faceSize2:9"
		faces="$faces -xrm *FaceSize3:10"
		faces="$faces -xrm *faceSize3:10"
		faces="$faces -xrm *FaceSize4:12"
		faces="$faces -xrm *faceSize4:12"
		faces="$faces -xrm *FaceSize5:14"
		faces="$faces -xrm *faceSize5:14"
		faces="$faces -xrm *FaceSize6:16"
		faces="$faces -xrm *faceSize6:16"
		# Above gets ignored/overwritten:
		# Other experiments suggested above is no longer necessary.
		faces=""
		faces="$faces -fa x"
		;;
	*)
		echo $DISPLAY
esac

#echo faces=$faces

# http://stackoverflow.com/questions/17810483/determine-character-cell-size-of-a-monospaced-truetype-font-for-xterm
# shows one the command "xwininfo"
# It would seem that could be rather expensive.
# Also have difficulty getting right $WINDOWID passed to it
# And you see the unwanted window flash up.

# But see...
# xwininfo -root


# TODO: work out a reasonable default height
# Want to examine args and find a "-fs" argument if any
# Note we will specify -geometry which may be overridden later anyway.
# Let alone that window manager may adjust oversized windows also.
# 

#xrandr on a new system added "primary" after connect; geometry not positional
#height=`xrandr --current | grep ' connected ' | awk '{print $3}' | sed 's/[^x]*x//' | sed 's/[+].*//' | sort -n | head -1`
pheight=`xwininfo -root | grep '^ *Height:  *' | sed 's/^.*: *//'`
if (( ( 0 < $fs ) && ( $fs < 61 ) ))
then
	cheight=${dims[$fs]}
	#echo cheight=$cheight
	cheight=`echo "$cheight" | sed 's/^.*x//'`
else
	# Force huge fonts to about 4 line windows
	cheight=`expr "$pheight" / 5 `
	# The following is a sometimes-wanted warning
	#echo "Oversize font; default height"
fi
#echo pheight=$pheight
#echo cheight=$cheight
#sleep 3

vusage=80
# following is probably a relic of compensating for a different miscalculation
if (( $fs > 6 ))
then
	vusage=80
fi
height=`expr '(' $pheight - $vusage ')' / $cheight`
#echo height=$height
# PROBLEM: fs is the width, height can vary; usually 2 is good estimate
# We worked this out; $dims provides the answer.

# Of great interest is width in pixels.

# I am not sure we need $faces anymore
#    $faces \
#    -xrm '*renderFont:on' \
#    -xrm '*RenderFont:on' \
#    -xrm '*FaceName:Dejavu mono' \
#    -xrm '*faceName:Dejavu mono' \
xterm \
    -xrm '*Scrollbar.thickness:5' \
    -xrm '*ScrollBar*background: #ee0000' \
    -xrm '*XmScrollBar.background: #ee0000' \
    -xrm '*ScrollBar.foreground: #ee0000' \
    -xrm '*XmScrollBar.foreground: #ee0000' \
    -xrm '*XmScrollBar.thickness: 5' \
    -bg '#efefef' -fg '#0f0f0f' \
    $faces \
    -xrm '*renderFont:on' \
    -xrm '*RenderFont:on' \
    -xrm '*Logfile:/home/arpepper/xterm.log' \
    -xrm '*fontWarnings:0' \
    -fs $fs \
    -geometry 80x$height \
    -sb -sl 15000 "$@@"

# For a long time we used...
#   -xrm "*geometry:80x$height" \
# (Now --geometry 80x$height )
#
# Perhaps
#   - I did not know about -geometry
#   - xterm did not, as it does now, tolerate multiple -geometry
#   - I wanted to use resources to override this geometry in some cases.
#
# Problem if we want to manipulate "$@@" contents
#Note:
#  -bg  xterm*background: or XTerm*background:
#  -fg  xterm*foreground: or XTerm*foreground

# Note: FaceSize xrm started working after -fa '8x' was added!?
#    -xrm '*FaceSize:12' \
#    -xrm '*faceSize:12' \
#    -xrm '*FaceSize1:12' \
#    -xrm '*faceSize1:12' \
#    -xrm '*FaceSize2:12' \
#    -xrm '*faceSize2:12' \
#    -xrm '*FaceSize3:12' \
#    -xrm '*faceSize3:12' \
#    -xrm '*FaceSize4:12' \
#    -xrm '*faceSize4:12' \
#    -xrm '*FaceSize5:12' \
#    -xrm '*faceSize5:12' \
#    -xrm '*FaceSize6:12' \
#    -xrm '*faceSize6:12' \
#    -fa 'x' \
#
# Later this stopped working in some environments.
#

@


1.10
log
@Forcibly switched at this point to a new history.
Closed correspondence to previous history (RCS/xvim,v) seemed to
be old 1.3 with the 1.6 here.

--- gitxvim/xvim1.3     2021-09-18 15:00:38.470281291 -0400
+++ lubuntu6xvim/xvim1.6        2021-09-18 14:57:00.691359547 -0400
@@@@ -98,0 +99,10 @@@@
+g=""
+# Note: no // around RE
+if [[ "${eargs}" =~ "-g" ]]
+then
+       # Following would be fooled by e.g. -title our-geometry
+       g=`echo "${eargs}" | sed 's/^.*-g/-g/' | sed 's/^-g[^ ]*  *\([^ ]*\).*/\1/'`
+       eargs=`echo "${eargs}" | sed 's/-g[^ ]* [^ ]*//'`
+fi
+echo g="$g" eargs="${eargs}"
+
@@@@ -190,0 +201 @@@@
+# Problem if we want to manipulate "$@@" contents

revision 1.3    locked by: cscf-adm;
date: 2019/07/02 21:44:19;  author: cscf-adm;  state: Exp;  lines: +1 -3

revision 1.6
date: 2019/07/23 16:08:57;  author: arpepper;  state: Exp;  lines: +144 -5
 
I know this is weird trying to use RCS files to supplement git change
history.
@
text
@d89 3
a91 2
        "4x10"
        "5x11"
d93 4
a96 4
        "6x14"
        "7x15"
        "8x16"
        "8x18"
d98 5
a102 5
        "9x20"
        "10x21"
        "11x24"
        "11x25"
        "12x26"
d104 39
a142 10
        "13x29"
        "14x30"
        "14x31"
        "15x32"
        "16x34"
        "16x35"
        "17x37"
        "18x38"
        "18x40"
        "19x40"
d146 1
d179 4
a182 7
# Problem: oversized fs is passed by xterm even though we don't accept it
		if (( ( 0 < $a ) && ( $a < 31 ) ))
		then
			fs=$a
			#fs=`echo "$fs" | sed 's/^.*x//'`
			#echo fs=$fs
		fi
d197 1
d260 1
a260 3
cheight=${dims[$fs]}
#echo cheight=$cheight
cheight=`echo "$cheight" | sed 's/^.*x//'`
d263 16
a278 3
pheight=`xwininfo -root | grep '^ *Height:  *' | sed 's/^.*: //'`
# 96 should be a parameter; represents normal vertical screen use
# height=`expr '(' $pheight - 96 ')' / $cheight`
d280 1
d283 1
a283 1
	vusage=48
d310 1
d312 1
a312 1
    -xrm "*geometry:80x$height" \
d315 9
@


1.9
log
@New values.
Fiddled with vusage for small sizes.
Also tried adjusting for large sizes.
 
Eventually I realized we previously had only handled sizes <= 25.
@
text
@@


1.8
log
@A new attempt.
Use different font table values.
Also fiddle with the height calculation itself.
@
text
@d51 30
a80 30
# 1:1x1
# 2:1x2
# 3:2x3
# 4:3x4
# 5:3x6
# 6:4x7
# 7:4x8
# 8:5x9
# 9:6x11
# 10:6x12
# 11:7x13
# 12:8x14
# 13:8x16
# 14:9x17
# 15:9x18
# 16:10x19
# 17:11x21
# 18:11x22
# 19:12x23
# 20:13x24
# 21:13x26
# 22:14x27
# 23:14x28
# 24:15x29
# 25:16x31
# 26:16x32
# 27:17x33
# 28:18x34
# 29:18x36
# 30:19x36
a82 1
        "1x1"
d84 4
a87 4
        "2x3"
        "3x4"
        "3x6"
        "4x7"
d89 5
a93 5
        "5x9"
        "6x11"
        "6x12"
        "7x13"
        "8x14"
d95 18
a112 17
        "9x17"
        "9x18"
        "10x19"
        "11x21"
        "11x22"
        "12x23"
        "13x24"
        "13x26"
        "14x27"
        "14x28"
        "15x29"
        "16x31"
        "16x32"
        "17x33"
        "18x34"
        "18x36"
        "19x36"
d149 1
a149 1
		if (( ( 0 < $a ) && ( $a < 26 ) ))
d173 1
a173 1
echo g="$g" eargs="${eargs}"
d239 6
a244 1
height=`expr '(' $pheight - 144 ')' / $cheight`
@


1.7
log
@A first shot at new values.
But they cause me to try to have too many lines in a window,
mostly just marginally, getting worse with increasing size.
@
text
@d51 3
a53 3
# 1:1x2
# 2:1x3
# 3:2x4
d62 19
a80 19
# 12:8x13
# 13:8x15
# 14:9x16
# 15:9x17
# 16:10x18
# 17:11x20
# 18:11x21
# 19:12x22
# 20:13x22
# 21:13x24
# 22:14x25
# 23:14x26
# 24:15x27
# 25:16x29
# 26:16x30
# 27:17x31
# 28:18x31
# 29:18x33
# 30:19x33
d83 1
d85 1
a85 2
        "1x3"
        "2x4"
d94 2
a95 3
        "8x13"
        "8x15"
        "9x16"
d97 2
a98 2
        "10x18"
        "11x20"
d100 2
a101 2
        "12x22"
        "13x22"
d103 10
a112 9
        "14x25"
        "14x26"
        "15x27"
        "16x29"
        "16x30"
        "17x31"
        "18x31"
        "18x33"
        "19x33"
d238 2
a239 1
height=`expr '(' $pheight - 96 ')' / $cheight`
@


1.6
log
@Who knows what set of contexts I intended these changes for?
@
text
@d21 1
a21 1
declare -a dims=(
d49 66
@


1.5
log
@A change now becoming crucial which recognizes more forms of
"DISPLAY".  Not everything is on :0.0 anymore.
@
text
@d2 61
d67 1
a67 1
args="$*"
d70 41
d125 2
a126 2
		faces="$faces -xrm *FaceSize:12"
		faces="$faces -xrm *faceSize:12"
d139 3
d148 32
a191 1
    -xrm '*geometry:80x50' \
d197 3
a199 1
    -sb -sl 15000 $args
d201 1
@


1.4
log
@Various fiddling over the years.
The most important option in getting the "-fs" to work is
"-fa x" which says that all fonts of the form NxN should be
included.
@
text
@d17 3
a19 1
	:[0-9]*.0|localhost:[0-9]*.0)
@


1.3
log
@Remove debugging echo of DISPLAY.
@
text
@d14 1
d17 1
a17 1
	:0.0)
d23 6
a28 6
		faces="$faces -xrm *FaceSize1:12"
		faces="$faces -xrm *faceSize1:12"
		faces="$faces -xrm *FaceSize2:12"
		faces="$faces -xrm *faceSize2:12"
		faces="$faces -xrm *FaceSize3:12"
		faces="$faces -xrm *faceSize3:12"
d31 4
a34 4
		faces="$faces -xrm *FaceSize5:12"
		faces="$faces -xrm *faceSize5:12"
		faces="$faces -xrm *FaceSize6:12"
		faces="$faces -xrm *faceSize6:12"
d41 5
d61 3
@


1.2
log
@Try doing faceSize only for default display.
@
text
@d8 1
a8 1
echo $DISPLAY
@


1.1
log
@Initial revision
@
text
@d8 32
d49 1
a49 14
    -xrm '*FaceSize:12' \
    -xrm '*faceSize:12' \
    -xrm '*FaceSize1:12' \
    -xrm '*faceSize1:12' \
    -xrm '*FaceSize2:12' \
    -xrm '*faceSize2:12' \
    -xrm '*FaceSize3:12' \
    -xrm '*faceSize3:12' \
    -xrm '*FaceSize4:12' \
    -xrm '*faceSize4:12' \
    -xrm '*FaceSize5:12' \
    -xrm '*faceSize5:12' \
    -xrm '*FaceSize6:12' \
    -xrm '*faceSize6:12' \
a52 1
    -fa 'x' \
d55 1
d57 18
@
