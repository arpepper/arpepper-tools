head	1.21;
access;
symbols;
locks
	arpepper:1.21; strict;
comment	@# @;


1.21
date	2021.11.15.23.15.46;	author arpepper;	state Exp;
branches;
next	1.20;

1.20
date	2021.11.13.23.49.15;	author arpepper;	state Exp;
branches;
next	1.19;

1.19
date	2021.11.12.22.54.59;	author arpepper;	state Exp;
branches;
next	1.18;

1.18
date	2021.11.12.22.31.17;	author arpepper;	state Exp;
branches;
next	1.17;

1.17
date	2021.11.12.19.50.38;	author arpepper;	state Exp;
branches;
next	1.16;

1.16
date	2021.11.09.03.29.51;	author arpepper;	state Exp;
branches;
next	1.15;

1.15
date	2021.11.09.03.20.38;	author arpepper;	state Exp;
branches;
next	1.14;

1.14
date	2021.11.09.03.15.24;	author arpepper;	state Exp;
branches;
next	1.13;

1.13
date	2021.11.09.02.52.20;	author arpepper;	state Exp;
branches;
next	1.12;

1.12
date	2021.11.09.02.35.18;	author arpepper;	state Exp;
branches;
next	1.11;

1.11
date	2021.11.09.02.16.20;	author arpepper;	state Exp;
branches;
next	1.10;

1.10
date	2021.11.09.02.06.09;	author arpepper;	state Exp;
branches;
next	1.9;

1.9
date	2021.11.09.01.55.48;	author arpepper;	state Exp;
branches;
next	1.8;

1.8
date	2021.11.09.00.11.04;	author arpepper;	state Exp;
branches;
next	1.7;

1.7
date	2021.11.08.23.17.13;	author arpepper;	state Exp;
branches;
next	1.6;

1.6
date	2021.11.08.22.50.43;	author arpepper;	state Exp;
branches;
next	1.5;

1.5
date	2021.11.08.22.45.33;	author arpepper;	state Exp;
branches;
next	1.4;

1.4
date	2021.11.08.22.31.33;	author arpepper;	state Exp;
branches;
next	1.3;

1.3
date	2021.11.08.22.27.30;	author arpepper;	state Exp;
branches;
next	1.2;

1.2
date	2021.11.08.21.58.16;	author arpepper;	state Exp;
branches;
next	1.1;

1.1
date	2021.11.08.21.28.08;	author arpepper;	state Exp;
branches;
next	;


desc
@save the BETA in case of emergency
@


1.21
log
@More tweaking.

Got more of "toours" to work, and added "-t" option to reveal it.
Extended y(string) to also allow y/string/ etc.
Utilize that (naively) in generated toours results.

Do not change prompt if no options (or i.e. only "-t")
@
text
@# source bin/ps1

# ps1 - set PS1 according to arguments
#
# This allows us to scope all our variables

function __ps1() {
	local ps1
	local oldps1 oldtitle oldprompt
	local cmd toours fromours
	local oldourtitle newourtitle oldourprompt newourprompt
	local newtitle newprompt
	local args
	local add_to_title s i

# quotes in the following are needed to preserve spaces properly
oldps1=`echo "$PS1"`
# 0000000 134 133 134 145 135 060 073 134 165 100 134 150 072 040 134 167
#           \   [   \   e   ]   0   ;   \   u   @@   \   h   :       \   w
# 0000020 134 141 134 135 134 165 100 134 150 072 134 167 050 044 123 110
#           \   a   \   ]   \   u   @@   \   h   :   \   w   (   $   S   H
# 0000040 114 126 114 051 044 040 012
#           L   V   L   )   $      \n
# 0000047
# Problems: ${debian_chroot:+($debian_chroot)} just disappears
#           \$ shows as evaluated.
#           similarly for $SHLVL
#
# Strangely, currently root ends up with PS1
# 0000000 044 173 144 145 142 151 141 156 137 143 150 162 157 157 164 072
#           $   {   d   e   b   i   a   n   _   c   h   r   o   o   t   :
# 0000020 053 050 044 144 145 142 151 141 156 137 143 150 162 157 157 164
#           +   (   $   d   e   b   i   a   n   _   c   h   r   o   o   t
# 0000040 051 175 134 165 100 134 150 072 134 167 134 044 040 012
#           )   }   \   u   @@   \   h   :   \   w   \   $      \n
# 0000056
#
# My quoting was wrong, but so was standard for title-setting case.
# Is the last thing in a standard title really an ASCII bell?
#
# After fixing...
# 0000000 134 133 134 145 135 060 073 044 173 144 145 142 151 141 156 137
#           \   [   \   e   ]   0   ;   $   {   d   e   b   i   a   n   _
# 0000020 143 150 162 157 157 164 072 053 050 044 144 145 142 151 141 156
#           c   h   r   o   o   t   :   +   (   $   d   e   b   i   a   n
# 0000040 137 143 150 162 157 157 164 051 175 134 150 072 040 134 167 134
#           _   c   h   r   o   o   t   )   }   \   h   :       \   w   \
# 0000060 141 134 135 044 173 144 145 142 151 141 156 137 143 150 162 157
#           a   \   ]   $   {   d   e   b   i   a   n   _   c   h   r   o
# 0000100 157 164 072 053 050 044 144 145 142 151 141 156 137 143 150 162
#           o   t   :   +   (   $   d   e   b   i   a   n   _   c   h   r
# 0000120 157 157 164 051 175 134 165 100 134 150 072 134 167 050 044 123
#           o   o   t   )   }   \   u   @@   \   h   :   \   w   (   $   S
# 0000140 110 114 126 114 051 134 044 040 012
#           H   L   V   L   )   \   $      \n
# 0000151
# 
# \\\[\\e.*\\\]  - indicates xterm title setting
# Remainder (including spaces) is regular prompt
oldtitle="$oldps1"
oldprompt="$oldps1"

if ( false ) ; then
# Useful demonstrations of bash interpretation
echo 'backslash \\' | od -bc -
echo 'backslash \\\\' | od -bc -
echo 'backslash \\\[' | od -bc -
echo 'backslash \\\[' | od -bc -
echo 'backslash \\\[\[' | od -bc -
echo 'backslash \134\134\[\[' | od -bc -
echo 'backslash \134\134\[\[\n' | od -bc -
echo "backslash \134\134\[\[\n" | od -bc -
echo 's/^(\\\[\\e.*\]).*$/$1/;print' | od -bc

echo "$oldtitle" | od -bc -
echo
fi

# We need to put this all in a function which returns new value for PS1

# echo "$PS1" | od -bc -

#oldtitle=`echo "$oldtitle" | sed 's/(^\\\[\\e[^\]]*\]).*/$1/'`
#oldtitle=`echo "$oldtitle" | perl -ne 's/^(\\\[\\e[^\]]*\]).*$/xxxxx/;print'`
# backslash literal-lbkt backslash e
#oldtitle=`echo "$oldtitle" | perl -ne 's/^(\\\[\\e[^\]]*\]).*$/xxxxx/;print'`
#oldtitle=`echo "$oldtitle" | perl -ne 's/^(\\.\\e.*\]).*$/xxxxx/;print'`
#oldtitle=`echo "$oldtitle" | tr '\134' 'Z' | perl -ne 's/^(Z\[Ze.*\]).*$/$1/;print'`
# oldtitle=`echo "$oldtitle" | perl -ne 's/^(\\\[\\e.*\]).*$/$1/;print'`
# In order to get/keep the backslash counts correct, we seem to
#   need to put it in a variable as follows...
# Backslash is literal in bash and needs no escaping?
cmd='if($_!~/^\\\[\\e.*\\\]/){$_="\n";};s/^(\\\[\\e.*\\\]).*$/$1/;print'
                      # could be foiled by sneaky prompt
#echo "$cmd"
#oldtitle=`echo "$oldtitle" | perl -ne "$cmd" ; echo "$cmd"`
oldtitle=`echo "$oldtitle" | perl -ne "$cmd"`

#echo "$oldtitle" | od -bc -
#echo oldtitle="$oldtitle"

cmd='s/^\\\[\\e.*\](.*)$/$1/;print'   # could be foiled by sneaky prompt
oldprompt=`echo "$oldprompt" | perl -ne "$cmd"`
#echo "$oldprompt" | od -bc -
#echo oldprompt="$oldprompt"

# toours - perl -e script
#toours=<<'_EOF'   # Nope!
# https://stackoverflow.com/questions/28565623/can-a-bash-heredoc-put-its-result-directly-into-a-variable
IFS= read -r -d '' toours <<'_EOF' || true
%reps = ( ' ', 'B', '$', "p", "(", "L", ")", "R");
while (<>) {
 # % and automatic brace balance seems to match differently at different times
	$s = $_;
	$istitle = 0;
	$s =~ s/\n//g;
	$new = "";
	while ( $s ne "" ) {
		$c = $s;
 		# \[\e]0;   backslashes literal
		if ( $s =~/^\\\[\\e\]0;/ ) {
			$s =~ s/^\\\[\\e\]0;//;
			$c = "";  # just remove escape from assumed title
			$s =~ s/\\a\\\]$/\\\]/;  # remove strange bell before ]
			$istitle = 1;
		}
		elsif ( $s=~/^\$[{]/)   # }
			{   # trying to appease vi
			# ${debian_chroot:+($debian_chroot)}'
			# {
			$c =~ s/^(.*[}]).*/$1/;
			$s =~ s/^..//;  # {
			$s =~ s/^[^}]*[}]//;
			#  Note [$] does not work...
			$c = $c =~ /^\$[{]debian_chroot[:][+][(]\$debian_chroot[)][}]/
				? "c" : (
				$c =~ /^\$[{]SHLVL[}]/
				? "m" :
				"y/$c/"
				) ;  # Q&D for now }
		}
		elsif ( $s=~/^\$/) {  # ($SHLVL)  (${SHLVL}
			$c =~ s/^.(\w*).*/$1/;
			$s =~ s/^.(\w*)//;
			$c = $c =~ /^$SHLVL/ ? "m" : "y/$c/";
		}
		elsif ( $s=~/^\\\]/) {  # just remove \] from assumed title
			# should be end of title
			$c =~ s/^(..).*//;
			$s =~ s/^..//;
i			# Note caller will have split into title and prompt
		}
		elsif ( $s=~/^\\./) {  # most e.g. \u becomes just u
			$c =~ s/^(..).*/$1/;
			$c =~ s/^\\//;
			$s =~ s/^..//;
		}
		else {
			if ($s =~ /^\w/) {
				$c =~ s:^(\w*).*:y/$1/:;
				$s =~ s/^\w*//;
			}
			else {
				$c =~ s/^(.).*/$1/;
				$s =~ s/^.//;
			}
		}
		# We will want to translate arbitrary text to
		#   to y(arbitrary text)  -- see also $
		if (defined($reps{$c}) ) {
			$c = $reps{$c};
		}
		# $c =~ s/\\//g;
		$new .= " ".$c." ";
	}
	if ($istitle) {
		# Presumptuously assume "show root userid only"
		if ($new !~ / r / && $new !~ / @@ /) {
			$new =~ s/ h / r h /;
		}
		elsif ($new =~ / u +\@@ /) {
			#$new =~ s/ u +\@@ / r /;
			# That's too presumptuous unless user was root
		}
	}
	print $new,"\n";
}
_EOF

# fromours - perl -e script
#fromours=<<'_EOF'   # Nope!
# https://stackoverflow.com/questions/28565623/can-a-bash-heredoc-put-its-result-directly-into-a-variable
IFS= read -r -d '' fromours <<'_EOF' || true
%reps = ( 'B', ' ', 'p', '\$', 'c', '${debian_chroot:+($debian_chroot)}',
	'L', '(', 'R', ')',
	'm', '${SHLVL}' );
# Eventually determined inside '' no extra \ needed.
while (<>) {
	$s = $_;
	$istitle = 0;
	$s =~ s/\n//g;
	$new = "";
	while ( $s ne "" ) {
		$c = $s;
		$c1 = $c;
		$c1 =~ s/^(.).*/$1/;
		$newc = $c1;
		$s =~ s/^.//;
 		# \[\e]0;   backslashes literal
		if ( $c1 =~ /^ / ) {
			$s =~ s/^ *//;
			$newc = "";  # ignore spaces
		}
		elsif ( $c1 =~ /^y/ ) {
			$newc = "";
			my ($d,$rd);
			$d = $s;
			$d =~ s/^(.).*/$1/;
			$rd = $d;
			$rd = ")" if ($rd eq "(");
			if ($s =~ /^[$d][^$d$rd]*[$rd]/) {
				$newc = $s;
				$s=~s/^[$d][^$d$rd]*[$rd]//;  # this seems dangerous
				$newc =~ s/^[$d]//;
				$newc =~ s/^([^$d$rd]*)[$rd)].*/$1/;
				# Problems y(() and y()) might be nice...
			}
		}
		elsif ( $c1 eq "r" ) {
			$newc = "";
			$newc = "\\u@@" if ( $< == 0);
		}
		elsif (defined($reps{$c1}) ) {
			$newc = $reps{$c1};
		}
		elsif ( $c1 eq "m" ) {
			# Tempting to do entire (N) or ""
			$newc = $ENV{'SHLVL'};
			$newc = "0" if ( $newc eq "" );
		}
		elsif ($c1 =~ /[a-zA-Z]/) { # treat all as potential escapes
			$newc = "\\$c1";
		}
		# Note there are non-alpha \\ sequences
		else {  # : @@ ( )
			$newc = $c1;
		}
		# $c =~ s/\\//g;
		$new .= $newc;
	}
	print $new,"\n";
}
_EOF

#echo "toours: $toours" | od -bc -

#echo "$oldtitle" | perl -e "$toours"
#echo "$oldprompt" | perl -e "$toours"
oldourtitle=`echo "$oldtitle" | perl -e "$toours"`
oldourprompt=`echo "$oldprompt" | perl -e "$toours"`
#echo "$oldourtitle"
#echo "$oldourprompt"

#echo "$oldourtitle" | perl -e "$fromours"
#echo "$oldourprompt" | perl -e "$fromours"


s=$1
case "$s" in
	-t)
		echo "${oldourtitle} T ${oldourprompt}"
		shift
		;;
	*)
	;;
esac

args=( $* )

add_to_title=1
newourtitle=""
newourprompt=""
i=0
while [[ -n "${args[${i}]}" ]] ; do
# Our args are in "our format"; no spaces, "B" instead
	s=${args[${i}]}
	case "$s" in
		[tT]) add_to_title=0;;
		[a-su-zA-SU-Z@@:])  # no spaces; "B" instead
			if [[ $add_to_title > 0 ]] ; then
				newourtitle="$newourtitle $s"
			else
				newourprompt="$newourprompt $s"
			fi
			;;
		*)    # until it becomes obvious why we should not do this...
			if [[ $add_to_title > 0 ]] ; then
				newourtitle="$newourtitle $s"
			else
				newourprompt="$newourprompt $s"
			fi
			;;
	esac
	let ++i
done

#echo "i=$i"
#sleep 2

# Translation:  (our vll)
#    u  \u
#    h  \h
#    w  \w
#    p  \$
#    m  1 < $SHLVL ? "($SHLVL)" : ""  (s is available now; shell depth)
#                             (d seems wanted for something?)
#    B  ' '
#    L  '('
#    R  ')'
#    :  :
#    @@  @@
#    T  (or t) divide title setting from following "actual prompt"
#        nothing before T, do not set title
#        if nothing after T, keep old "actual prompt"
#    c  ${debian_chroot:+($debian_chroot)}
#    r - special(?) root@@ if user is root (want user@@ if user is not xxxxxx)
#    y  y(string) - insert literal string (ov var) for now
#
# Letters implied by bash(1)
#    a A d D e H h j l n r s T t u V v W w   @@ ! $ [ ]
# Also:
#    \
#    nnn
# And standardish character-escapes
#    a b d f n r t v
#
# Leaves
#    c g i k m o p q x y z   (some we use)
#
#  New standard
#    c u @@ h : B w T c u @@ h : w p B
#  New proposed default
#    c r h : B w T c u @@ h : w s p B
#
# Examples
#   source ps1  T
#   source ps1 h T
#   source ps1 r h T
#

#echo "$newourtitle"
#echo "$newourprompt"
#echo "$newourtitle" | perl -e "$fromours"
#echo "$newourprompt" | perl -e "$fromours"

# if newprompt is empty, use old one
# if newtitle is empty, do not set it
# if newtitle is not empty, wrap with necessary magic

#echo "$oldtitle" | perl -e "$toours"
#echo "$oldprompt" | perl -e "$toours"

if [[ $i == 0 ]] ; then
	# No no-dash options; make no changes
	newtitle="$oldtitle"
else
	if [[ "" == "$newourtitle" ]] ; then
		newtitle=""  # remove title setting
	else
#echo "$ournewtitle" | od -bc -
		newtitle=`echo "$newourtitle" | perl -e "$fromours"`
# 0000000 134 133 134 145 135 060 073 
#           \   [   \   e   ]   0   ;
# 0000060 141 134 135
#           a   \   ]
		newtitle='\[\e]0;'"$newtitle"'\a\]'
		# Observation: if PS1 has \[\e]0; but not \a\] bash hangs
	fi
fi
if [[ "" == "$newourprompt" ]] ; then
	newprompt="$oldprompt"
else
	newprompt=`echo "$newourprompt" | perl -e "$fromours"`
fi


#echo "title: $newtitle" | od -bc
#echo "prompt: $newprompt" | od -bc


	#ps1="$newprompt";
	if [[ "" != "$newtitle" ]] ; then
	# Leading and multiple internal spaces appear to be preserved
		ps1="$newtitle""$newprompt"
	else
		ps1="$newprompt"
	fi
	PS1="$ps1"

}
# echo "PS1: $PS1" | od -bc

__ps1 "$*"
unset __ps1

# color prompts
#   PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
# Reasonable prompt
#   PS1='${debian_chroot:+($debian_chroot)}\u@@\h:\w\$ '
# Set xterm title
#   PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@@\h: \w\a\]$PS1"
####    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@@\h: \w\a\]$PS1"


@


1.20
log
@Lived dangerously.
Bringing changes back from production ps1.

Half-implement y(string) (does y(${VAR}) almost automatically.
I say half-implemented because tours does not use it.

Assume any unrecognized letter should be turned into a \\ escepe.
@
text
@d111 1
a111 1
%reps = ( ' ', 'B', '$', "p");
d124 1
d131 1
a131 1
			$c =~ s/^(.*}).*/$1/;
d133 8
a140 2
			$s =~ s/^.*[}].//;
			$c = $c =~ /^\$[{]deb/ ? "c" : "?";  # Q&D for now }
d145 1
a145 1
			$c = $c =~ /^$SHLVL/ ? "m" : "?";  # Q&D for now
d148 1
d151 1
d153 1
a153 1
		elsif ( $s=~/^\\./) {
d159 8
a166 2
			$c =~ s/^(.).*/$1/;
			$s =~ s/^.//;
d182 2
a183 1
			$new =~ s/ u +\@@ / r /;
d216 6
a221 1
			if ($s =~ /^[(][^()]*[)]/) {
d223 3
a225 3
				$s=~s/^[(][^()]*[)]//;  # this seems dangerous
				$newc =~ s/^[(]//;
				$newc =~ s/^([^()]*)[)].*/$1/;
d268 10
d307 2
d363 3
a365 2
if [[ "" == "$newourtitle" ]] ; then
	newtitle=""  # remove title setting
d367 3
d371 1
a371 1
	newtitle=`echo "$newourtitle" | perl -e "$fromours"`
d376 3
a378 2
	newtitle='\[\e]0;'"$newtitle"'\a\]'
	# Observation: if PS1 has \[\e]0; but not \a\] bash hangs
@


1.19
log
@Remove some irrelevant comments, and indicate how our function
accomplishes variable scoping.

Finally arrange for dynamic $SHLVL in generated prompts.
Small correction to vll description.
@
text
@d135 1
a135 1
		elsif ( $s=~/^\$/) {  # ($SHLVL)
d153 2
d179 1
d198 10
d220 5
a224 1
		elsif ($c1 !~ /[a-z]/) {  # : @@ ( )
a226 3
		else { # u h w  etc.
			$newc = "\\$c1";
		}
d285 2
d294 1
@


1.18
log
@Rationalize our letter choices in the comments,
and then decide to use m (unfortunately) for $SHLVL since
both of "d" and "s" are spoken for somewhat.
@
text
@d3 1
a3 18
# Fundamental problem: variables set here are not scoped.
# We can corrupt things for our caller, and also any
# values we do not initialize are remembered from before.
# (That caused us to fail to turn off title setting).


# Proposed vll
#
# u - username
# h - hostname
# w - cwd (~ processed)
# [^a-zA-Z] - literal
# m - depth ($SHLVL) if $SHLVL > 1
# T - End title setting, begin prompt.
# t - synonym for T for now.
# B - blank
# p - prompt ($ or # i.e. \$ )
# r - special(?) root@@ if user is root (want user@@ if user is not xxxxxx)
d5 1
a5 3
#

# ps1 - set PS1 according to arguments
d176 3
a178 2
%reps = ( 'B', ' ', 'p', "\\\$", 'c', '${debian_chroot:+($debian_chroot)}',
	'm', '\\\$SHLVL' );
d199 3
a206 3
		elsif (defined($reps{$c1}) ) {
			$newc = $reps{$c1};
		}
d263 1
a263 1
# Translation:
d265 1
a265 1
#    h  \u
@


1.17
log
@Changes apparently necessary for
bash 4.4.20
or perhaps
perl 5.26.1

Something did not like the { in a regexp.
But the errors did not indicate what was complaining.
@
text
@d15 1
a15 1
# d - depth ($SHLVL) if $SHLVL > 1
d157 1
a157 1
			$c = $c =~ /^$SHLVL/ ? "d" : "?";  # Q&D for now
d196 1
a196 1
	'd', '\\\$SHLVL' );
d217 1
a217 1
		elsif ( $c1 eq "d" ) {
d286 1
a286 1
#    s  1 < $SHLVL ? "($SHLVL)" : ""  (s is available now; shell depth)
d296 11
@


1.16
log
@Unset our function.
Track down a few more locals.
@
text
@d145 1
a145 1
		elsif ( $s=~/^\${/)   # }
d151 2
a152 2
			$s =~ s/^.*}.//;
			$c = $c =~ /^\${deb/ ? "c" : "?";  # Q&D for now }
@


1.15
log
@Kludged? in $SHLVL
/
@
text
@d33 1
a33 1
	local i
d356 1
@


1.14
log
@Remove more old comments and assignments.

Putting entire thing in a function was fairly straight-forward.

A bug now is that $SHLVL does not get interpreted.
@
text
@d217 5
@


1.13
log
@Dummy in function __ps1 which should eventually encompass this
entire file.
@
text
@d26 9
d196 1
a196 1
	'd', '\$SHLVL' );
a247 5
show_user=no
set_xtitle=yes
newp=
newtp=

a271 1
# echo  $newp
a274 5
# #echo newp: "$newp"
# newsp=`echo -n "$newp" | sed 's/ t[^ ]/ /g'`
# newtp=`echo -n "$newp" | sed 's/ [^t]/ /g'`
# #echo newsp: "$newsp"
# #echo newtp: "$newtp"
a336 2
function __ps1() {
	local ps1
d350 1
a350 1
__ps1
@


1.12
log
@Remove incorrect, useless comments.
Add some more indicating problems.
@
text
@d89 2
d339 11
a349 7
#ps1="$newprompt";
if [[ "" != "$newtitle" ]] ; then
# Leading and multiple internal spaces appear to be preserved
	PS1="$newtitle""$newprompt"
else
	PS1="$newprompt"
fi
d351 1
d354 2
d363 1
@


1.11
log
@Remove all debugging output.
@
text
@d3 6
d13 1
a13 1
# c - cwd (~ processed)
a14 2
# A - @@
# C - :
d16 2
a17 3
# t? - for title
# n? or nt? - remove
# y? or yt? - add (beginning or end only)
d19 1
a19 1
# p - prompt ($ or #)
a20 2
# S - special(?) current pslast - I don't think we need that
#
a21 11
# Following is maximal
# ps1 tu t@@ th t: tB tc u @@ h d : c p B
# (save as ~/.ps1last)
# Remove user from title
# ps1 ntu nt@@
# Cannot really add things unless we restrict positions?
# Therefore S for current string/setting...
# ps1 yR ytR S
# Perhaps I will normally use simply
# ps1 tR th t: tB tc u @@ h d : c p B
# Note that although order is important, t and not-t can be jumbled.
d316 1
a316 1
	:  # remove title setting
d318 1
a344 1

a346 2
# PS1="$ps1"

a353 2

# Would be nice to add shell depth to prompt
@


1.10
log
@Comments about trailing and multiple internal space.
Remove debugging "reads".

Loss of spaces from old prompt was easily solved by adding
quotes around the original saving of the old $PS1.
@
text
@d99 1
a99 1
echo "$PS1" | od -bc -
d113 1
a113 1
echo "$cmd"
a115 1
echo "$oldtitle" | od -bc -
d117 2
a118 1
echo oldtitle="$oldtitle"
d122 2
a123 2
echo "$oldprompt" | od -bc -
echo oldprompt="$oldprompt"
d234 2
a235 2
echo "$oldtitle" | perl -e "$toours"
echo "$oldprompt" | perl -e "$toours"
d238 2
a239 2
echo "$oldourtitle"
echo "$oldourprompt"
d241 2
a242 2
echo "$oldourtitle" | perl -e "$fromours"
echo "$oldourprompt" | perl -e "$fromours"
@


1.9
log
@Comment, and a debug printf related to it.
@
text
@d36 2
a37 1
oldps1=`echo $PS1`
a311 1
# An easy way to turn off our non-standard "s" would be nice
d313 5
a317 4
echo "$newourtitle"
echo "$newourprompt"
echo "$newourtitle" | perl -e "$fromours"
echo "$newourprompt" | perl -e "$fromours"
d322 2
a323 5
echo "$oldtitle" | perl -e "$toours"
echo "$oldprompt" | perl -e "$toours"

echo Just before newourtitle
read something
d334 1
a341 7
# Problem: leading and multiple internal spaces will be lost

echo "title: $newtitle" | od -bc
echo "prompt: $newprompt" | od -bc

echo Just after newourtitle
read something
d343 2
d348 1
d355 1
a355 4
echo "PS1: $PS1" | od -bc

echo Final PS1 evaluation
read something
@


1.8
log
@It seems that \a\] is necessary for an xterm title, or bash appears
to loop or wait forever.
@
text
@d98 2
d342 2
@


1.7
log
@Interpreting args with new syntax.
Showing what interpretation will be, but not actually using.
@
text
@a241 11

ps1save=
if [[ -r ${HOME}/.ps1save ]] ; then
	ps1save=`sh -c "cat 2>/dev/null ${HOME}/.ps1save`
fi
if [[ -z "$ps1save" ]] ; then
	ps1save='tR th t: tB tc u @@ h d : c p B'
fi
ps1save=" $ps1save "
echo ps1save=$ps1save

a243 1
oldp=$ps1save
d250 2
a251 2
newtitle=""
newprompt=""
d260 1
a260 1
				newtitle="$newtitle $s"
d262 1
a262 1
				newprompt="$newprompt $s"
d267 1
a267 1
				newtitle="$newtitle $s"
d269 1
a269 1
				newprompt="$newprompt $s"
d311 4
a314 4
echo "$newtitle"
echo "$newprompt"
echo "$newtitle" | perl -e "$fromours"
echo "$newprompt" | perl -e "$fromours"
d319 18
a336 4
# Might be nice if we could work with existing PS1?
if [[ 2 > $SHLVL ]] ; then
	# PS1="${debian_chroot:+($debian_chroot)}\u@@\h:\w\$ "
	ps1='${debian_chroot:+($debian_chroot)}\u@@\h:\w\$ '
d338 1
a338 2
	# PS1="${debian_chroot:+($debian_chroot)}\u@@\h:\w(\$SHLVL)\$ "
	ps1='${debian_chroot:+($debian_chroot)}\u@@\h:\w($SHLVL)\$ '
d341 5
a345 1
PS1="$ps1"
d347 6
a352 6
if [[ "$set_xtitle" == "yes" ]] ; then
	if [[ "$show_user" == "yes" ]] ; then
		ps1='\[\e]0;${debian_chroot:+($debian_chroot)}\u@@\h: \w\a\]'"$PS1"
	else
		ps1='\[\e]0;${debian_chroot:+($debian_chroot)}\h: \w\a\]'"$PS1"
	fi
d355 7
a361 1
PS1="$ps1"
@


1.6
log
@Add back setting of args array.
For now.
@
text
@a254 18
news=""
show_user=no
set_xtitle=yes
while [[ -n "$1" ]] ; do
	news="$news $1"
	case "$1" in
		nu) show_user=no;;
		yu) show_user=yes;;
		nxt) set_xtitle=no;;
		yxt) set_xtitle=yes;;
		n*);;
		S*);;
		*) ;;
	esac
	shift
done


d260 4
d266 1
a267 4
	ns=`echo -n "$s"  | sed 's/^n//'`
	ys=`echo -n "$s"  | sed 's/^y//'`
echo $s $ns $ys
echo -n $newp :
d269 15
a283 15
		nu) newp=`echo -n "$newp"  | sed 's/ u / /'`;;
		yu) show_user=yes;;
		nxt) set_xtitle=no;;
		yxt) set_xtitle=yes;;
		nt) set_xtitle=no;;
		yt) set_xtitle=yes;;
		nt*) newp=`echo -n "$newp"  | sed "s/ $ns / /"`;;
		yt*) newp="$newp $ys";;
		n*)  newp=`echo -n "$newp"  | sed "s/ $ns / /"`;;
		y*) newp="$newp $ys";;
		y*)  newp=`echo -n "$newp"  | sed "s/ $ys / /"`;;
		S*) newp="$newp $oldp";;
		t?) newp="$newp $s";;
		?) newp="$newp $s";;
		*) ;;
d285 1
a285 1
echo  $newp
d289 5
a293 5
#echo newp: "$newp"
newsp=`echo -n "$newp" | sed 's/ t[^ ]/ /g'`
newtp=`echo -n "$newp" | sed 's/ [^t]/ /g'`
#echo newsp: "$newsp"
#echo newtp: "$newtp"
d322 8
@


1.5
log
@Do not treat prompt as title if there was no title in old PS1.
@
text
@d253 2
d271 1
@


1.4
log
@Removed "Just testing arrays".
We've mostly given up on using mostly bash, and
probably know enough about arrays already.
Run-time comment out our bash backslash demonstrations.
@
text
@d108 2
a109 1
cmd='s/^(\\\[\\e.*\\\]).*$/$1/;print'   # could be foiled by sneaky prompt
@


1.3
log
@Remove tentative bash associative array.

Mostly brace-balance the toours perl -e string.
@
text
@a33 11
# Just testing arrays...
testa=
if [[ -n "$testa" ]] ; then
declare -a args
#args[0]=
args=( $* )
for i in 0 1 2 3 4 5 ; do
	echo ${args[$i]}
done
fi

d82 2
d96 1
@


1.2
log
@Added huge string perl functions.

Finally removed some early debugging so we can better evaluate our
current debugging.
@
text
@d69 1
a128 18
# I don't think this will be really feasible
declare -A reps
reps['u']='\u'
reps['h']='\h'
reps['w']='\w'
reps['p']='\$'
reps['s']=    # '1 < $SHLVL ? "($SHLVL)" : ""  (s is available now; shell depth)
#                             (d seems wanted for something?)
reps['B']=' '
reps[':']=':'
reps['@@']='@@'   # careful!
#    T  (or t) divide title setting from following "actual prompt"
#        nothing before T, do not set title
#        if nothing after T, keep old "actual prompt"
reps['c']='${debian_chroot:+($debian_chroot)}'
reps['r']= #  special(?) root@@ if user is root (want user@@ if user is not xxxxxx)
#

d135 1
d148 2
a149 1
		elsif ( $s=~/^\${/) {  # }
d151 1
d155 1
a155 1
			$c = $c =~ /^\${deb/ ? "c" : "?";  # Q&D for now
d157 1
a157 2
		elsif ( $s=~/^\$/) {  #
			# ($SHLVL)
d159 1
a159 1
			$s =~ s/^.(\w*)//;  # {
d212 1
a212 1
		if ( $c1 =~/^ / ) {
d218 1
a218 1
			$newc = "\u@@" if ( $< == 0);
@


1.1
log
@Initial revision
@
text
@d222 4
a225 1
		$newc = $c;
d227 1
a227 1
		if ( $s =~/^ / ) {
d231 3
a233 2
		elsif (defined($reps{$c}) ) {
			$newc = $reps{$c};
d235 5
a239 2
		elsif ($c !~ /[a-z]/) {  # : @@ ( )
			$newc = $c;
d242 1
a242 1
			$newc = "\\$c";
d255 7
a291 7
echo "news: $news"
args=( $news )
for i in 0 1 2 3 4 5 ; do
	echo -n ${i}:' '
	echo ${args[${i}]}
done

d325 1
a325 1
echo newp: "$newp"
d328 2
a329 2
echo newsp: "$newsp"
echo newtp: "$newtp"
@
