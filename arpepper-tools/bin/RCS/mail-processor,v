head	1.14;
access;
symbols;
locks
	arpepper:1.14; strict;
comment	@# @;


1.14
date	2024.10.23.20.48.39;	author arpepper;	state Exp;
branches;
next	1.13;

1.13
date	2019.11.27.21.13.27;	author arpepper;	state Exp;
branches;
next	1.12;

1.12
date	2019.11.27.21.07.37;	author arpepper;	state Exp;
branches;
next	1.11;

1.11
date	2019.11.27.20.58.21;	author arpepper;	state Exp;
branches;
next	1.10;

1.10
date	2019.11.27.20.48.33;	author arpepper;	state Exp;
branches;
next	1.9;

1.9
date	2018.05.30.18.15.29;	author arpepper;	state Exp;
branches;
next	1.8;

1.8
date	2018.02.06.19.00.47;	author arpepper;	state Exp;
branches;
next	1.7;

1.7
date	2018.02.02.18.22.45;	author arpepper;	state Exp;
branches;
next	1.6;

1.6
date	2018.01.16.22.52.47;	author arpepper;	state Exp;
branches;
next	1.5;

1.5
date	2017.11.30.21.24.13;	author arpepper;	state Exp;
branches;
next	1.4;

1.4
date	2017.11.30.21.19.06;	author arpepper;	state Exp;
branches;
next	1.3;

1.3
date	2017.11.24.22.55.11;	author arpepper;	state Exp;
branches;
next	1.2;

1.2
date	2017.11.24.21.49.48;	author arpepper;	state Exp;
branches;
next	1.1;

1.1
date	2017.11.23.22.39.40;	author arpepper;	state Exp;
branches;
next	;


desc
@RCS here, help track changes for github.
@


1.14
log
@RCS change which got mail-processor basically working again.
@
text
@#!/usr/bin/perl -w

#
# This is extremely messy but currently works.
# The nested loop to process multiple messages on stdin is particularly
# messy.
#

$HOME = $ENV{'HOME'};
if ( !defined($HOME) || $HOME eq "" ) {
	$HOME = "/home/arpepper";
}

#$newpath = `/bin/showpath /u/arpepper/bin usedby=maintainer filetools gnu standard`;
$path = $ENV{'PATH'};

if ( $path eq "") {
	$path = "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin";
}
$newpath = "$HOME/bin:$path";
if ( $newpath ne "" ) {
        $ENV{'PATH'} = $newpath;
}
else {
        die "Cannot set PATH";
}

$gnudate = "date"; # assert our path ensures that gnu/bin/date will be used
sub
unixtime {
	my ($datestring) = @@_;

	# we need to change this to use internal routines soon.
	$value = `$gnudate --date "$datestring" +%s`;
	return 0 + $value; 
}

sub
mail {
	my ($file, $preface, $subject) = @@_;

	#print "mail $file $subject\n";
	#return;
	#open(PIPE,"|/usr/lib/sendmail -bm arpepper\@@cs.uwaterloo.ca");
	#printf(PIPE "From: Adrian Pepper <arpepper\@@uwaterloo.ca>\n");
	open(PIPE,"|/usr/lib/sendmail -f arpepper\@@localhost -bm arpepper\@@localhost");
	printf(PIPE "From: Adrian Pepper <arpepper\@@uwaterloo.ca>\n");
	printf(PIPE "To: arpepper\@@localhost\n");
	printf(PIPE "Subject: %s\n", $subject);
	printf(PIPE "\n");
	print PIPE $preface;
	open(F,"<$file");
	while (<F>) {
		print PIPE $_;
	}
}

$end = 0;

$mbox = $ARGV[0];
shift;

if ( !defined($mbox) || $mbox eq "" ) {
	exit 0
}

if ( $mbox eq "-a" ) {
	chdir "$HOME/mail-processor/";
	foreach $mbox ( `ls -1` ) { 
		$mbox =~ s/\n//;
		if ( -d $mbox ) {
			system("cat /dev/null | $HOME/bin/mail-processor $mbox" );
		}
	}
	exit 0;
}


# Following will count messages multiple times.
# But at least it might begin mostly working again...
if ( $mbox =~ m:^/u[^/]*/arpepper/mail/: ) {
	$mbox =~ s:^/u[^/]*/arpepper/mail/:: ;
}
if ( $mbox =~ m:^/home/arpepper/mail/: ) {
	$mbox =~ s:^/home/arpepper/mail/:: ;
}
if ( $mbox =~ m:^/u[^/]*/arpepper/[^/][^/]*mail/: ) {
	$mbox =~ s:^/u[^/]*/arpepper/[^/][^/]*mail/:: ;
}
if ( $mbox =~ m:^/home/arpepper/[^/][^/]*mail/: ) {
	$mbox =~ s:^/home/arpepper/[^/][^/]*mail/:: ;
}
# It actually seems that we want simply basename
#   Later it is assumed $mbox is a simple file
$mbox =~ s:^.*/::;
if ( ! -d "$HOME/mail-processor/$mbox" ) {
	system("mkdir -p $HOME/mail-processor/$mbox");
}
chdir "$HOME/mail-processor/$mbox";
if ( ! -d "last" ) {
	system("mkdir -p last");
}

#$now = `/software/gnu/bin/date "+%s"`;
$now = `/bin/date "+%s"`;
#$recent = $now - 2*86400;

#system("date > update");
# Following might not detect a read-only filesystem situation
#if ( ! -w "update" ) { exit(0); }
system("date > update.$$");
# Avoid mailbombing because of a read-only filesystem
if ( ! -w "update.$$" ) { exit(0); }
system("mv update.$$ update");

$frequent = 0;
#$hour=`/software/gnu/bin/date "+%H"`;
$hour=`/bin/date "+%H"`;
$hour += 0;
if (7 <= $hour && $hour <= 21) {
	$frequent = 1;
}
#$dow = `/software/gnu/bin/date "+%w"`;
$dow = `/bin/date "+%w"`;
$dow += 0;
if ($dow < 1 || 5 < $dow) {
	$frequent = 0;
}
# $then = `stat last -headings +mtime -pathname`;
if ( -d "last" ) {
	$then = `/usr/bin/stat -c %Y last`;
	$then += 0;
}
else {
	$then = 0;
}
# A problem is first message in a batch gets sent off alone
# Would really like to wait five minutes to accumulate a batch
# 
# Even worse, a stored batch gets sent off, and then the latest waits
# for the next batch.
#
# I'm not even sure this preliminary examination is necessary.
# As long as zero input lets us fall through to bottom, identical
# logic at the bottom should send the stored batch.
if (0) {
if ( (( $frequent && (($now - $then) >= (60*60) ) )
	 || (($now - $then) >= (8*60*60)) )  ) {
	$items = 0 + `cat summary-recent | wc -l`;
	$messages = 0 + `cat recent | wc -l`;
	if ( $items != 0 || $messages != 0 ) {
		# Really we want to wait some time after first new message arrives
		#mail("summary-recent", "" . "\n", "Summary $mbox activity $messages/$items");
		# emergency mail bombing prevention, we hope
		$r = "recent";
		if ( ! -w "$r" ) { exit(0); }
		mail("summary-recent", "" . "\n", "][$mbox $messages/$items summary");
		system("cp -p recent last");
		system("cp -p summary-recent last");
		open (R,">$r") || die "Could not write $h";
		close(R);
		$r = "summary-recent";
		open (R,">$r") || die "Could not write $r";
		system("touch last/dummy ; rm last/dummy");
	}
}
}

#while (<>) {
#}

while (<>) {
	if ($_ =~ /^From /) {   # /^From /i ?
		$end = 0;
		next;
	}
	# ignore messages up to next /^From /
	next if $end;
	$fromseen = 0;
	$from = "";
	$efrom = "";
	$line = $_;
	$rtno = 0;
	# done one message
	while (defined($line) && $line ne "\n" && $line =~ /\n/ ) {
		$line =~ s/\n//g;
		if ( $line =~ /^From: /i ) {
			next if ($fromseen);
			$fromseen = 1;
			$from = "Someone";
			$efrom = "";
		}
		if ( $line =~ /^Subject: /i ) {
			undef $subject;
			$line =~ m@@^Subject: \[UW-(RT|MATH|MFCF|CSCF)\s+#([0-9]+)\] *(.*)@@i;
			if (defined($2)) {
				$rtno = $2 if $rtno == 0;
				if (defined($3)) {
					$subject = $3;
				}
			}
			else {
				$subject = $line;
				$subject =~ s/^Subject\:\s*//;
				$subject =~ s/^[Rr][Ee]:/Re:/;
			}
			while (<>) {
				$cline = $line = $_;
				$cline =~ s/\n//g;
				# really should generalize multi-line
				if ($cline !~ /^\s+/ ) {
					# process in next iteration
					last;
				}
				else {
					$cline =~ s/^\s+//;
					$subject .= " " . "$cline";
				}
			}
			$subject =~ s/(.{1,90}).*/$1/;
		}
		elsif ( $line =~ m@@^From @@ ) {
			last;
		}
		else {
			# avoid going past look-ahead, e.g. multi-line headers
			$line = <>;
		}
	}
	if ( defined($line) && $line =~ m@@^From @@ ) {
		# No more lines to eat; start new message
		$end = 0;
	}
	else {
		$end = 1;
	}

	if ($from eq "Someone") {
		#chdir "$HOME/rt/";
		$r = "recent";
		system("touch $r");
		open (R,">>$r") || die "Could not write $h";
		print R "$subject\n";
		close(R);
	}
	else {
		#chdir "$HOME/rt/";
		$r = "errors";
		system("touch $r");
		open (R,">>$r") || die "Could not write $h";
		print R "$efrom\n";
		close(R);
	}
}

#$now = `/software/gnu/bin/date "+%s"`;
$now = `/bin/date "+%s"`;
#$recent = $now - 2*86400;

#chdir "$HOME/rt";
system("date > update");
if ( -z "recent" ) { exit(0); }

system("sort recent | uniq -c | sort -nr | sed 's/	/  /g' | sed 's/^    //' > summary-recent-$$");
# probably read-only filesystem; prevent mailbombing
if ( ! -e "summary-recent-$$" ) { exit(0); }

# If following fails, we have problem, but previous check should be sufficient
system("mv summary-recent-$$ summary-recent");

#
# If there are new problems, we should know?
# Alerts for recovery are less critical.
# But how do we debounce?
#
$frequent = 0;
if ( -f "./important" ) {
	# Should probably use a file of variables (how to cache?)
	# Also, I'd misremembered the flag file name as "./frequent" ...
	#$hour=`/software/gnu/bin/date "+%H"`;
	$hour=`/bin/date "+%H"`;
	$hour += 0;
	if (7 <= $hour && $hour <= 21) {
		$frequent = 1;
	}
	#$dow = `/software/gnu/bin/date "+%w"`;
	$dow = `/bin/date "+%w"`;
	$dow += 0;
	if ($dow < 1 || 5 < $dow) {
		$frequent = 0;
	}
	#$then = `stat last -headings +mtime -pathname`;
	$then = `/usr/bin/stat -c %Y last`;
	$then += 0;
}
# Problem is first message in a batch gets sent off alone
# Would really like to wait five minutes to accumulate a batch
#
# Also, we'd like to collect and send mailing lists together.
# 
# Plan...
# First, gather all list *NOT* important and old enough into a batch message
#   (old based on $then = `/usr/bin/stat -c %Y last`)
#   (But once one list triggers "old", most others should be included too)
#   <blank line>
#   ][$mbox $messages/$items summary
#       summary-recent($mbox)
# *IMPORTANT* empty each recent and summary-recent (mv to last)
# *CAUTION* lists which had no content will still have an old last ?
#
# Problem: processing "all" could be expensive
#
# E.g. Create ~/mail-processor/summary then...
#    chdir "$HOME/mail-processor";
#    mail("summary", "" . "\n", "][list noise summary");
#
# THEN...  
# chdir "$HOME/mail-processor/$mbox";
#   and fall through to the following
#
# So every minor list message potentially triggers a batched update.
# Important list updates are processed by themselves (afterwards)
#
# Really, we want categories of mailbox; any scan would consider only 
# a particular category.  Could that be done with different mail-processor
# directories and a command-line argument?
#
$DEFAULTHOURS = 18;  # used to be "8"
$laststamp = $now - 6 * 60;  # useful stamp; six hours ago
if ( !$frequent && (($now - $then) >= (${DEFAULTHOURS}*60*60)) ) {
	my ($titems, $tmessages);
	$titems=0;
	$tmessages=0;
	# Create and send ~/mail-processor/summary based on all old summaries
	chdir "$HOME/mail-processor" || die "chdir";
	# Perhaps should use $$ file to detect read-only
	system("cat /dev/null > summary");
	open (SUMMARY,">summary") || die "open summary";
	foreach $mbox ( `ls -1` ) { 
		$mbox =~ s/\n//;
		if ( -d $mbox && ! -e "$mbox/important" ) {
			$items = 0 + `cat $mbox/summary-recent | wc -l`;
			$messages = 0 + `cat $mbox/recent | wc -l`;
			$titems += $items;
			$tmessages += $messages;
			if ( $items != 0 || $messages != 0) {
				print SUMMARY "\n";
				print SUMMARY "][$mbox $messages/$items summary\n";
				open(MARY,"<$mbox/summary-recent") || die "recent";
				while (<MARY>) {
					print SUMMARY $_;
				}
				close(MARY);
				system("cp -p $mbox/recent $mbox/last/");
				system("cp -p $mbox/summary-recent $mbox/last/");
				$r = "$mbox/recent";
				open (R,">$r") || die "Could not write $r";
				close(R);
				$r = "$mbox/summary-recent";
				open (R,">$r") || die "Could not write $r";
				close(R);
				system("touch $mbox/last/dummy ; rm $mbox/last/dummy");
			}
			else {
				# Nothing waiting
				# last is a semi-arbitrary time now.
				# I would like to set it to most recent of
				# last or six hours ago.  But it is a directory.
				$check = `/usr/bin/stat -c %Y $mbox/last`;
				if ( $check < $laststamp ) {
					system("touch -d \"6 hours ago\" $mbox/last");
				}
			}
		}
	}
	close (SUMMARY);
	if ( $titems != 0 || $tmessages != 0) {
		mail("summary", "" . "\n", "][list noise summary");
	}
	exit 0;
}

#
# Now fall through to consider "important" messages.
if ( (( $frequent && (($now - $then) >= (60*60) ) )
	 || (($now - $then) >= (${DEFAULTHOURS}*60*60)) )  ) {
	# This works okay, but more arbitrary archives might be nice
	$items = 0 + `cat summary-recent | wc -l`;
	$messages = 0 + `cat recent | wc -l`;
	if ( $items != 0 || $messages != 0 ) {
		# Really we want to wait some time after first new message arrives
		#mail("summary-recent", "" . "\n", "Summary $mbox activity $messages/$items");
		mail("summary-recent", "" . "\n", "][$mbox $messages/$items summary");
		system("cp -p recent last/");
		system("cp -p summary-recent last/");
		$r = "recent";
		open (R,">$r") || die "Could not write $r";
		close(R);
		$r = "summary-recent";
		open (R,">$r") || die "Could not write $r";
		close(R);
		system("touch last/dummy ; rm last/dummy");
	}
}
@


1.13
log
@Expect all mbox directories to be directly under $HOME/mail-processor
 
It's not really clear that's what we want, however.
@
text
@d93 3
@


1.12
log
@Move some non-executed code to help match the mx.cs.uwaterloo.ca version better.
@
text
@d79 2
d86 6
@


1.11
log
@Add readonly filesystem heuristics learned the hard way on mx.cs.uwaterloo.ca.
@
text
@d143 3
a148 3
		# emergency mail bombing prevention, we hope
		$r = "recent";
		if ( ! -w "$r" ) { exit(0); }
@


1.10
log
@Add a To: header to correspond to (but not match) mx.cs.uwaterloo.ca version.
@
text
@d97 7
a103 1
system("date > update");
d146 1
d148 1
d254 4
d325 1
@


1.9
log
@Notes:
- This has grown out-of-sync with github.com version
- Make this change on u1404mwiki and u1804mail initially
   - to hopefully prevent sending empty "list noise summary" messages
 
- newly added variables indicate that the scope of some old variables
   is sloppy
@
text
@d48 1
@


1.8
log
@Brought forward updates from linux.cs.uwaterloo.ca.
Up-to-date with version 1.23
 
Tweak  batched processing of "less important" mailboxes.
 
I am ready to contemplate multiple versions, e.g. mail-processor0
mail-processor1, etc.
But worry that could tend to cause some mail to be neglected again.
@
text
@d307 3
d319 2
d352 3
a354 1
	mail("summary", "" . "\n", "][list noise summary");
@


1.7
log
@Brought forward updates from linux.cs.uwaterloo.ca.
Up-to-date with version 1.21.
 
Implement batched processing of "less important" mailboxes.
I think.
 
Use /usr/bin/stat
@
text
@d298 5
a302 1
# Important list updates are processed by themselves
d305 1
d313 1
a313 1
		if ( -d $mbox && ! -e "$mbox/.important" ) {
d334 10
d351 2
@


1.6
log
@Brought forward updates from linux.cs.uwaterloo.ca.
Up-to-date with version 1.17
 
Changed our version to sendmail to localhost
 
Change from a default of 8 hour threshold to 13.
Comments.
Different subject concatenation/truncation rules.
Try upping DEFAULTHOURS, but really we need per-list frequency parameters.
Try to regularize Re:
@
text
@d268 2
a269 1
	$then = `stat last -headings +mtime -pathname`;
d274 2
d277 23
d301 35
@


1.5
log
@Changed Subject to put important info first, identified by "][".
@
text
@d44 3
a46 1
	open(PIPE,"|/usr/lib/sendmail -bm arpepper\@@cs.uwaterloo.ca");
a179 1
					$subject =~ s/(.{1,64}).*/$1/;
d185 1
a185 1
				$subject =~ s/(.{1,64}).*/$1/;
d200 1
d254 2
d273 2
d276 2
a277 1
	 || (($now - $then) >= (8*60*60)) )  ) {
@


1.4
log
@Fixed a long-time bug probably dating back to rt-processor where
processing headers actually terminated after Subject:
 
This meant that if Subject preceded From: then From: was not processed.
 
(Sync'd with linux.cs.uwaterloo.ca version)
(verified problem was introduced recently (in mail-processor), actually)
@
text
@d133 2
a134 1
		mail("summary-recent", "" . "\n", "Summary $mbox activity $messages/$items");
d275 2
a276 1
		mail("summary-recent", "" . "\n", "Summary $mbox activity $messages/$items");
@


1.3
log
@Fixes from github.
Initialize $efrom.
Use /usr/bin/stat not old Ian! stat.
@
text
@d150 1
a150 1
	if ($_ =~ /^From /) {
d164 1
a164 1
		if ( $line =~ /^From: / ) {
d186 4
a189 4
				$line = $_;
				$line =~ s/\n//g;
				# really should generalize multi-line]
				if ($line !~ /^\s+/ ) {
d194 2
a195 2
					$line =~ s/^\s+//;
					$subject .= " " . "$line";
d208 1
a208 1
		# No more lines to eat
@


1.2
log
@Thought I'd improved it.
Use home.  More checks for $mbox prefix.  (?)
@
text
@d109 8
a116 2
$then = `stat last -headings +mtime -pathname`;
$then += 0;
d158 1
@


1.1
log
@Initial revision
@
text
@d9 5
a19 1
$HOME = "/home/arpepper";
d78 3
@
